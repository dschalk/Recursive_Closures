{"version":3,"file":"Ces5mITZ.js","sources":["../../../../../../node_modules/svelte/src/internal/shared/utils.js","../../../../../../node_modules/svelte/src/internal/client/constants.js","../../../../../../node_modules/svelte/src/internal/client/reactivity/equality.js","../../../../../../node_modules/svelte/src/internal/client/errors.js","../../../../../../node_modules/svelte/src/constants.js","../../../../../../node_modules/svelte/src/internal/client/context.js","../../../../../../node_modules/svelte/src/internal/client/proxy.js","../../../../../../node_modules/svelte/src/internal/client/reactivity/deriveds.js","../../../../../../node_modules/svelte/src/internal/client/reactivity/sources.js","../../../../../../node_modules/svelte/src/internal/client/warnings.js","../../../../../../node_modules/svelte/src/internal/client/dom/hydration.js","../../../../../../node_modules/svelte/src/internal/client/dom/operations.js","../../../../../../node_modules/svelte/src/internal/client/reactivity/effects.js","../../../../../../node_modules/svelte/src/internal/client/dom/task.js","../../../../../../node_modules/svelte/src/internal/client/error-handling.js","../../../../../../node_modules/svelte/src/internal/client/runtime.js"],"sourcesContent":["// Store the references to globals in case someone tries to monkey patch these, causing the below\n// to de-opt (this occurs often when using popular extensions).\nexport var is_array = Array.isArray;\nexport var index_of = Array.prototype.indexOf;\nexport var array_from = Array.from;\nexport var object_keys = Object.keys;\nexport var define_property = Object.defineProperty;\nexport var get_descriptor = Object.getOwnPropertyDescriptor;\nexport var get_descriptors = Object.getOwnPropertyDescriptors;\nexport var object_prototype = Object.prototype;\nexport var array_prototype = Array.prototype;\nexport var get_prototype_of = Object.getPrototypeOf;\nexport var is_extensible = Object.isExtensible;\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\nexport const noop = () => {};\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n\n/**\n * @template [T=any]\n * @param {any} value\n * @returns {value is PromiseLike<T>}\n */\nexport function is_promise(value) {\n\treturn typeof value?.then === 'function';\n}\n\n/** @param {Function} fn */\nexport function run(fn) {\n\treturn fn();\n}\n\n/** @param {Array<() => void>} arr */\nexport function run_all(arr) {\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tarr[i]();\n\t}\n}\n\n/**\n * TODO replace with Promise.withResolvers once supported widely enough\n * @template T\n */\nexport function deferred() {\n\t/** @type {(value: T) => void} */\n\tvar resolve;\n\n\t/** @type {(reason: any) => void} */\n\tvar reject;\n\n\t/** @type {Promise<T>} */\n\tvar promise = new Promise((res, rej) => {\n\t\tresolve = res;\n\t\treject = rej;\n\t});\n\n\t// @ts-expect-error\n\treturn { promise, resolve, reject };\n}\n\n/**\n * @template V\n * @param {V} value\n * @param {V | (() => V)} fallback\n * @param {boolean} [lazy]\n * @returns {V}\n */\nexport function fallback(value, fallback, lazy = false) {\n\treturn value === undefined\n\t\t? lazy\n\t\t\t? /** @type {() => V} */ (fallback)()\n\t\t\t: /** @type {V} */ (fallback)\n\t\t: value;\n}\n\n/**\n * When encountering a situation like `let [a, b, c] = $derived(blah())`,\n * we need to stash an intermediate value that `a`, `b`, and `c` derive\n * from, in case it's an iterable\n * @template T\n * @param {ArrayLike<T> | Iterable<T>} value\n * @param {number} [n]\n * @returns {Array<T>}\n */\nexport function to_array(value, n) {\n\t// return arrays unchanged\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\n\t// if value is not iterable, or `n` is unspecified (indicates a rest\n\t// element, which means we're not concerned about unbounded iterables)\n\t// convert to an array with `Array.from`\n\tif (n === undefined || !(Symbol.iterator in value)) {\n\t\treturn Array.from(value);\n\t}\n\n\t// otherwise, populate an array with `n` values\n\n\t/** @type {T[]} */\n\tconst array = [];\n\n\tfor (const element of value) {\n\t\tarray.push(element);\n\t\tif (array.length === n) break;\n\t}\n\n\treturn array;\n}\n","export const DERIVED = 1 << 1;\nexport const EFFECT = 1 << 2;\nexport const RENDER_EFFECT = 1 << 3;\nexport const BLOCK_EFFECT = 1 << 4;\nexport const BRANCH_EFFECT = 1 << 5;\nexport const ROOT_EFFECT = 1 << 6;\nexport const BOUNDARY_EFFECT = 1 << 7;\nexport const UNOWNED = 1 << 8;\nexport const DISCONNECTED = 1 << 9;\nexport const CLEAN = 1 << 10;\nexport const DIRTY = 1 << 11;\nexport const MAYBE_DIRTY = 1 << 12;\nexport const INERT = 1 << 13;\nexport const DESTROYED = 1 << 14;\nexport const EFFECT_RAN = 1 << 15;\n/** 'Transparent' effects do not create a transition boundary */\nexport const EFFECT_TRANSPARENT = 1 << 16;\n/** Svelte 4 legacy mode props need to be handled with deriveds and be recognized elsewhere, hence the dedicated flag */\nexport const LEGACY_DERIVED_PROP = 1 << 17;\nexport const INSPECT_EFFECT = 1 << 18;\nexport const HEAD_EFFECT = 1 << 19;\nexport const EFFECT_HAS_DERIVED = 1 << 20;\nexport const EFFECT_IS_UPDATING = 1 << 21;\n\nexport const STATE_SYMBOL = Symbol('$state');\nexport const LEGACY_PROPS = Symbol('legacy props');\nexport const LOADING_ATTR_SYMBOL = Symbol('');\nexport const PROXY_PATH_SYMBOL = Symbol('proxy path');\n","/** @import { Equals } from '#client' */\n\n/** @type {Equals} */\nexport function equals(value) {\n\treturn value === this.v;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function safe_not_equal(a, b) {\n\treturn a != a\n\t\t? b == b\n\t\t: a !== b || (a !== null && typeof a === 'object') || typeof a === 'function';\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nexport function not_equal(a, b) {\n\treturn a !== b;\n}\n\n/** @type {Equals} */\nexport function safe_equals(value) {\n\treturn !safe_not_equal(value, this.v);\n}\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\n/**\n * Using `bind:value` together with a checkbox input is not allowed. Use `bind:checked` instead\n * @returns {never}\n */\nexport function bind_invalid_checkbox_value() {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_checkbox_value\\nUsing \\`bind:value\\` together with a checkbox input is not allowed. Use \\`bind:checked\\` instead\\nhttps://svelte.dev/e/bind_invalid_checkbox_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_checkbox_value`);\n\t}\n}\n\n/**\n * Component %component% has an export named `%key%` that a consumer component is trying to access using `bind:%key%`, which is disallowed. Instead, use `bind:this` (e.g. `<%name% bind:this={component} />`) and then access the property on the bound component instance (e.g. `component.%key%`)\n * @param {string} component\n * @param {string} key\n * @param {string} name\n * @returns {never}\n */\nexport function bind_invalid_export(component, key, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_invalid_export\\nComponent ${component} has an export named \\`${key}\\` that a consumer component is trying to access using \\`bind:${key}\\`, which is disallowed. Instead, use \\`bind:this\\` (e.g. \\`<${name} bind:this={component} />\\`) and then access the property on the bound component instance (e.g. \\`component.${key}\\`)\\nhttps://svelte.dev/e/bind_invalid_export`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_invalid_export`);\n\t}\n}\n\n/**\n * A component is attempting to bind to a non-bindable property `%key%` belonging to %component% (i.e. `<%name% bind:%key%={...}>`). To mark a property as bindable: `let { %key% = $bindable() } = $props()`\n * @param {string} key\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function bind_not_bindable(key, component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`bind_not_bindable\\nA component is attempting to bind to a non-bindable property \\`${key}\\` belonging to ${component} (i.e. \\`<${name} bind:${key}={...}>\\`). To mark a property as bindable: \\`let { ${key} = $bindable() } = $props()\\`\\nhttps://svelte.dev/e/bind_not_bindable`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/bind_not_bindable`);\n\t}\n}\n\n/**\n * Calling `%method%` on a component instance (of %component%) is no longer valid in Svelte 5\n * @param {string} method\n * @param {string} component\n * @returns {never}\n */\nexport function component_api_changed(method, component) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_changed\\nCalling \\`${method}\\` on a component instance (of ${component}) is no longer valid in Svelte 5\\nhttps://svelte.dev/e/component_api_changed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_changed`);\n\t}\n}\n\n/**\n * Attempted to instantiate %component% with `new %name%`, which is no longer valid in Svelte 5. If this component is not under your control, set the `compatibility.componentApi` compiler option to `4` to keep it working.\n * @param {string} component\n * @param {string} name\n * @returns {never}\n */\nexport function component_api_invalid_new(component, name) {\n\tif (DEV) {\n\t\tconst error = new Error(`component_api_invalid_new\\nAttempted to instantiate ${component} with \\`new ${name}\\`, which is no longer valid in Svelte 5. If this component is not under your control, set the \\`compatibility.componentApi\\` compiler option to \\`4\\` to keep it working.\\nhttps://svelte.dev/e/component_api_invalid_new`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/component_api_invalid_new`);\n\t}\n}\n\n/**\n * A derived value cannot reference itself recursively\n * @returns {never}\n */\nexport function derived_references_self() {\n\tif (DEV) {\n\t\tconst error = new Error(`derived_references_self\\nA derived value cannot reference itself recursively\\nhttps://svelte.dev/e/derived_references_self`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/derived_references_self`);\n\t}\n}\n\n/**\n * Keyed each block has duplicate key `%value%` at indexes %a% and %b%\n * @param {string} a\n * @param {string} b\n * @param {string | undefined | null} [value]\n * @returns {never}\n */\nexport function each_key_duplicate(a, b, value) {\n\tif (DEV) {\n\t\tconst error = new Error(`each_key_duplicate\\n${value ? `Keyed each block has duplicate key \\`${value}\\` at indexes ${a} and ${b}` : `Keyed each block has duplicate key at indexes ${a} and ${b}`}\\nhttps://svelte.dev/e/each_key_duplicate`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/each_key_duplicate`);\n\t}\n}\n\n/**\n * `%rune%` cannot be used inside an effect cleanup function\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_in_teardown(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_teardown\\n\\`${rune}\\` cannot be used inside an effect cleanup function\\nhttps://svelte.dev/e/effect_in_teardown`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_teardown`);\n\t}\n}\n\n/**\n * Effect cannot be created inside a `$derived` value that was not itself created inside an effect\n * @returns {never}\n */\nexport function effect_in_unowned_derived() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_in_unowned_derived\\nEffect cannot be created inside a \\`$derived\\` value that was not itself created inside an effect\\nhttps://svelte.dev/e/effect_in_unowned_derived`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_in_unowned_derived`);\n\t}\n}\n\n/**\n * `%rune%` can only be used inside an effect (e.g. during component initialisation)\n * @param {string} rune\n * @returns {never}\n */\nexport function effect_orphan(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_orphan\\n\\`${rune}\\` can only be used inside an effect (e.g. during component initialisation)\\nhttps://svelte.dev/e/effect_orphan`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_orphan`);\n\t}\n}\n\n/**\n * Maximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\n * @returns {never}\n */\nexport function effect_update_depth_exceeded() {\n\tif (DEV) {\n\t\tconst error = new Error(`effect_update_depth_exceeded\\nMaximum update depth exceeded. This can happen when a reactive block or effect repeatedly sets a new value. Svelte limits the number of nested updates to prevent infinite loops\\nhttps://svelte.dev/e/effect_update_depth_exceeded`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/effect_update_depth_exceeded`);\n\t}\n}\n\n/**\n * Failed to hydrate the application\n * @returns {never}\n */\nexport function hydration_failed() {\n\tif (DEV) {\n\t\tconst error = new Error(`hydration_failed\\nFailed to hydrate the application\\nhttps://svelte.dev/e/hydration_failed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/hydration_failed`);\n\t}\n}\n\n/**\n * Could not `{@render}` snippet due to the expression being `null` or `undefined`. Consider using optional chaining `{@render snippet?.()}`\n * @returns {never}\n */\nexport function invalid_snippet() {\n\tif (DEV) {\n\t\tconst error = new Error(`invalid_snippet\\nCould not \\`{@render}\\` snippet due to the expression being \\`null\\` or \\`undefined\\`. Consider using optional chaining \\`{@render snippet?.()}\\`\\nhttps://svelte.dev/e/invalid_snippet`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/invalid_snippet`);\n\t}\n}\n\n/**\n * `%name%(...)` cannot be used in runes mode\n * @param {string} name\n * @returns {never}\n */\nexport function lifecycle_legacy_only(name) {\n\tif (DEV) {\n\t\tconst error = new Error(`lifecycle_legacy_only\\n\\`${name}(...)\\` cannot be used in runes mode\\nhttps://svelte.dev/e/lifecycle_legacy_only`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/lifecycle_legacy_only`);\n\t}\n}\n\n/**\n * Cannot do `bind:%key%={undefined}` when `%key%` has a fallback value\n * @param {string} key\n * @returns {never}\n */\nexport function props_invalid_value(key) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_invalid_value\\nCannot do \\`bind:${key}={undefined}\\` when \\`${key}\\` has a fallback value\\nhttps://svelte.dev/e/props_invalid_value`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_invalid_value`);\n\t}\n}\n\n/**\n * Rest element properties of `$props()` such as `%property%` are readonly\n * @param {string} property\n * @returns {never}\n */\nexport function props_rest_readonly(property) {\n\tif (DEV) {\n\t\tconst error = new Error(`props_rest_readonly\\nRest element properties of \\`$props()\\` such as \\`${property}\\` are readonly\\nhttps://svelte.dev/e/props_rest_readonly`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/props_rest_readonly`);\n\t}\n}\n\n/**\n * The `%rune%` rune is only available inside `.svelte` and `.svelte.js/ts` files\n * @param {string} rune\n * @returns {never}\n */\nexport function rune_outside_svelte(rune) {\n\tif (DEV) {\n\t\tconst error = new Error(`rune_outside_svelte\\nThe \\`${rune}\\` rune is only available inside \\`.svelte\\` and \\`.svelte.js/ts\\` files\\nhttps://svelte.dev/e/rune_outside_svelte`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/rune_outside_svelte`);\n\t}\n}\n\n/**\n * Property descriptors defined on `$state` objects must contain `value` and always be `enumerable`, `configurable` and `writable`.\n * @returns {never}\n */\nexport function state_descriptors_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_descriptors_fixed\\nProperty descriptors defined on \\`$state\\` objects must contain \\`value\\` and always be \\`enumerable\\`, \\`configurable\\` and \\`writable\\`.\\nhttps://svelte.dev/e/state_descriptors_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_descriptors_fixed`);\n\t}\n}\n\n/**\n * Cannot set prototype of `$state` object\n * @returns {never}\n */\nexport function state_prototype_fixed() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_prototype_fixed\\nCannot set prototype of \\`$state\\` object\\nhttps://svelte.dev/e/state_prototype_fixed`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_prototype_fixed`);\n\t}\n}\n\n/**\n * Updating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without `$state`\n * @returns {never}\n */\nexport function state_unsafe_mutation() {\n\tif (DEV) {\n\t\tconst error = new Error(`state_unsafe_mutation\\nUpdating state inside a derived or a template expression is forbidden. If the value should not be reactive, declare it without \\`$state\\`\\nhttps://svelte.dev/e/state_unsafe_mutation`);\n\n\t\terror.name = 'Svelte error';\n\t\tthrow error;\n\t} else {\n\t\tthrow new Error(`https://svelte.dev/e/state_unsafe_mutation`);\n\t}\n}","export const EACH_ITEM_REACTIVE = 1;\nexport const EACH_INDEX_REACTIVE = 1 << 1;\n/** See EachBlock interface metadata.is_controlled for an explanation what this is */\nexport const EACH_IS_CONTROLLED = 1 << 2;\nexport const EACH_IS_ANIMATED = 1 << 3;\nexport const EACH_ITEM_IMMUTABLE = 1 << 4;\n\nexport const PROPS_IS_IMMUTABLE = 1;\nexport const PROPS_IS_RUNES = 1 << 1;\nexport const PROPS_IS_UPDATED = 1 << 2;\nexport const PROPS_IS_BINDABLE = 1 << 3;\nexport const PROPS_IS_LAZY_INITIAL = 1 << 4;\n\nexport const TRANSITION_IN = 1;\nexport const TRANSITION_OUT = 1 << 1;\nexport const TRANSITION_GLOBAL = 1 << 2;\n\nexport const TEMPLATE_FRAGMENT = 1;\nexport const TEMPLATE_USE_IMPORT_NODE = 1 << 1;\nexport const TEMPLATE_USE_SVG = 1 << 2;\nexport const TEMPLATE_USE_MATHML = 1 << 3;\n\nexport const HYDRATION_START = '[';\n/** used to indicate that an `{:else}...` block was rendered */\nexport const HYDRATION_START_ELSE = '[!';\nexport const HYDRATION_END = ']';\nexport const HYDRATION_ERROR = {};\n\nexport const ELEMENT_IS_NAMESPACED = 1;\nexport const ELEMENT_PRESERVE_ATTRIBUTE_CASE = 1 << 1;\n\nexport const UNINITIALIZED = Symbol();\n\n// Dev-time component properties\nexport const FILENAME = Symbol('filename');\nexport const HMR = Symbol('hmr');\n\nexport const NAMESPACE_HTML = 'http://www.w3.org/1999/xhtml';\nexport const NAMESPACE_SVG = 'http://www.w3.org/2000/svg';\nexport const NAMESPACE_MATHML = 'http://www.w3.org/1998/Math/MathML';\n\n// we use a list of ignorable runtime warnings because not every runtime warning\n// can be ignored and we want to keep the validation for svelte-ignore in place\nexport const IGNORABLE_RUNTIME_WARNINGS = /** @type {const} */ ([\n\t'state_snapshot_uncloneable',\n\t'binding_property_non_reactive',\n\t'hydration_attribute_changed',\n\t'hydration_html_changed',\n\t'ownership_invalid_binding',\n\t'ownership_invalid_mutation'\n]);\n\n/**\n * Whitespace inside one of these elements will not result in\n * a whitespace node being created in any circumstances. (This\n * list is almost certainly very incomplete)\n * TODO this is currently unused\n */\nexport const ELEMENTS_WITHOUT_TEXT = ['audio', 'datalist', 'dl', 'optgroup', 'select', 'video'];\n\nexport const ATTACHMENT_KEY = '@attach';\n","/** @import { ComponentContext } from '#client' */\n\nimport { DEV } from 'esm-env';\nimport { lifecycle_outside_component } from '../shared/errors.js';\nimport { source } from './reactivity/sources.js';\nimport {\n\tactive_effect,\n\tactive_reaction,\n\tset_active_effect,\n\tset_active_reaction\n} from './runtime.js';\nimport { effect, teardown } from './reactivity/effects.js';\nimport { legacy_mode_flag } from '../flags/index.js';\n\n/** @type {ComponentContext | null} */\nexport let component_context = null;\n\n/** @param {ComponentContext | null} context */\nexport function set_component_context(context) {\n\tcomponent_context = context;\n}\n\n/**\n * The current component function. Different from current component context:\n * ```html\n * <!-- App.svelte -->\n * <Foo>\n *   <Bar /> <!-- context == Foo.svelte, function == App.svelte -->\n * </Foo>\n * ```\n * @type {ComponentContext['function']}\n */\nexport let dev_current_component_function = null;\n\n/** @param {ComponentContext['function']} fn */\nexport function set_dev_current_component_function(fn) {\n\tdev_current_component_function = fn;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\tconst context_map = get_or_init_context_map('getContext');\n\tconst result = /** @type {T} */ (context_map.get(key));\n\treturn result;\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tconst context_map = get_or_init_context_map('setContext');\n\tcontext_map.set(key, context);\n\treturn context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\tconst context_map = get_or_init_context_map('hasContext');\n\treturn context_map.has(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\tconst context_map = get_or_init_context_map('getAllContexts');\n\treturn /** @type {T} */ (context_map);\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {any} runes\n * @param {Function} [fn]\n * @returns {void}\n */\nexport function push(props, runes = false, fn) {\n\tvar ctx = (component_context = {\n\t\tp: component_context,\n\t\tc: null,\n\t\td: false,\n\t\te: null,\n\t\tm: false,\n\t\ts: props,\n\t\tx: null,\n\t\tl: null\n\t});\n\n\tif (legacy_mode_flag && !runes) {\n\t\tcomponent_context.l = {\n\t\t\ts: null,\n\t\t\tu: null,\n\t\t\tr1: [],\n\t\t\tr2: source(false)\n\t\t};\n\t}\n\n\tteardown(() => {\n\t\t/** @type {ComponentContext} */ (ctx).d = true;\n\t});\n\n\tif (DEV) {\n\t\t// component function\n\t\tcomponent_context.function = fn;\n\t\tdev_current_component_function = fn;\n\t}\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} [component]\n * @returns {T}\n */\nexport function pop(component) {\n\tconst context_stack_item = component_context;\n\tif (context_stack_item !== null) {\n\t\tif (component !== undefined) {\n\t\t\tcontext_stack_item.x = component;\n\t\t}\n\t\tconst component_effects = context_stack_item.e;\n\t\tif (component_effects !== null) {\n\t\t\tvar previous_effect = active_effect;\n\t\t\tvar previous_reaction = active_reaction;\n\t\t\tcontext_stack_item.e = null;\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < component_effects.length; i++) {\n\t\t\t\t\tvar component_effect = component_effects[i];\n\t\t\t\t\tset_active_effect(component_effect.effect);\n\t\t\t\t\tset_active_reaction(component_effect.reaction);\n\t\t\t\t\teffect(component_effect.fn);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tset_active_effect(previous_effect);\n\t\t\t\tset_active_reaction(previous_reaction);\n\t\t\t}\n\t\t}\n\t\tcomponent_context = context_stack_item.p;\n\t\tif (DEV) {\n\t\t\tdev_current_component_function = context_stack_item.p?.function ?? null;\n\t\t}\n\t\tcontext_stack_item.m = true;\n\t}\n\t// Micro-optimization: Don't set .a above to the empty object\n\t// so it can be garbage-collected when the return here is unused\n\treturn component || /** @type {T} */ ({});\n}\n\n/** @returns {boolean} */\nexport function is_runes() {\n\treturn !legacy_mode_flag || (component_context !== null && component_context.l === null);\n}\n\n/**\n * @param {string} name\n * @returns {Map<unknown, unknown>}\n */\nfunction get_or_init_context_map(name) {\n\tif (component_context === null) {\n\t\tlifecycle_outside_component(name);\n\t}\n\n\treturn (component_context.c ??= new Map(get_parent_context(component_context) || undefined));\n}\n\n/**\n * @param {ComponentContext} component_context\n * @returns {Map<unknown, unknown> | null}\n */\nfunction get_parent_context(component_context) {\n\tlet parent = component_context.p;\n\twhile (parent !== null) {\n\t\tconst context_map = parent.c;\n\t\tif (context_map !== null) {\n\t\t\treturn context_map;\n\t\t}\n\t\tparent = parent.p;\n\t}\n\treturn null;\n}\n","/** @import { Source } from '#client' */\nimport { DEV } from 'esm-env';\nimport { get, active_effect, active_reaction, set_active_reaction } from './runtime.js';\nimport {\n\tarray_prototype,\n\tget_descriptor,\n\tget_prototype_of,\n\tis_array,\n\tobject_prototype\n} from '../shared/utils.js';\nimport { state as source, set } from './reactivity/sources.js';\nimport { PROXY_PATH_SYMBOL, STATE_SYMBOL } from '#client/constants';\nimport { UNINITIALIZED } from '../../constants.js';\nimport * as e from './errors.js';\nimport { get_stack, tag } from './dev/tracing.js';\nimport { tracing_mode_flag } from '../flags/index.js';\n\n// TODO move all regexes into shared module?\nconst regex_is_valid_identifier = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\n/**\n * @template T\n * @param {T} value\n * @returns {T}\n */\nexport function proxy(value) {\n\t// if non-proxyable, or is already a proxy, return `value`\n\tif (typeof value !== 'object' || value === null || STATE_SYMBOL in value) {\n\t\treturn value;\n\t}\n\n\tconst prototype = get_prototype_of(value);\n\n\tif (prototype !== object_prototype && prototype !== array_prototype) {\n\t\treturn value;\n\t}\n\n\t/** @type {Map<any, Source<any>>} */\n\tvar sources = new Map();\n\tvar is_proxied_array = is_array(value);\n\tvar version = source(0);\n\n\tvar stack = DEV && tracing_mode_flag ? get_stack('CreatedAt') : null;\n\tvar reaction = active_reaction;\n\n\t/**\n\t * @template T\n\t * @param {() => T} fn\n\t */\n\tvar with_parent = (fn) => {\n\t\tvar previous_reaction = active_reaction;\n\t\tset_active_reaction(reaction);\n\n\t\t/** @type {T} */\n\t\tvar result = fn();\n\n\t\tset_active_reaction(previous_reaction);\n\t\treturn result;\n\t};\n\n\tif (is_proxied_array) {\n\t\t// We need to create the length source eagerly to ensure that\n\t\t// mutations to the array are properly synced with our proxy\n\t\tsources.set('length', source(/** @type {any[]} */ (value).length, stack));\n\t}\n\n\t/** Used in dev for $inspect.trace() */\n\tvar path = '';\n\n\t/** @param {string} new_path */\n\tfunction update_path(new_path) {\n\t\tpath = new_path;\n\n\t\ttag(version, `${path} version`);\n\n\t\t// rename all child sources and child proxies\n\t\tfor (const [prop, source] of sources) {\n\t\t\ttag(source, get_label(path, prop));\n\t\t}\n\t}\n\n\treturn new Proxy(/** @type {any} */ (value), {\n\t\tdefineProperty(_, prop, descriptor) {\n\t\t\tif (\n\t\t\t\t!('value' in descriptor) ||\n\t\t\t\tdescriptor.configurable === false ||\n\t\t\t\tdescriptor.enumerable === false ||\n\t\t\t\tdescriptor.writable === false\n\t\t\t) {\n\t\t\t\t// we disallow non-basic descriptors, because unless they are applied to the\n\t\t\t\t// target object — which we avoid, so that state can be forked — we will run\n\t\t\t\t// afoul of the various invariants\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor#invariants\n\t\t\t\te.state_descriptors_fixed();\n\t\t\t}\n\n\t\t\twith_parent(() => {\n\t\t\t\tvar s = sources.get(prop);\n\n\t\t\t\tif (s === undefined) {\n\t\t\t\t\ts = source(descriptor.value, stack);\n\t\t\t\t\tsources.set(prop, s);\n\n\t\t\t\t\tif (DEV && typeof prop === 'string') {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tset(s, descriptor.value, true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn true;\n\t\t},\n\n\t\tdeleteProperty(target, prop) {\n\t\t\tvar s = sources.get(prop);\n\n\t\t\tif (s === undefined) {\n\t\t\t\tif (prop in target) {\n\t\t\t\t\tconst s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t\tupdate_version(version);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// When working with arrays, we need to also ensure we update the length when removing\n\t\t\t\t// an indexed property\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\n\t\t\t\t\tvar n = Number(prop);\n\n\t\t\t\t\tif (Number.isInteger(n) && n < ls.v) {\n\t\t\t\t\t\tset(ls, n);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tset(s, UNINITIALIZED);\n\t\t\t\tupdate_version(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (DEV && prop === PROXY_PATH_SYMBOL) {\n\t\t\t\treturn update_path;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar exists = prop in target;\n\n\t\t\t// create a source, but only if it's an own property and not a prototype property\n\t\t\tif (s === undefined && (!exists || get_descriptor(target, prop)?.writable)) {\n\t\t\t\ts = with_parent(() => {\n\t\t\t\t\tvar p = proxy(exists ? target[prop] : UNINITIALIZED);\n\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn s;\n\t\t\t\t});\n\n\t\t\t\tsources.set(prop, s);\n\t\t\t}\n\n\t\t\tif (s !== undefined) {\n\t\t\t\tvar v = get(s);\n\t\t\t\treturn v === UNINITIALIZED ? undefined : v;\n\t\t\t}\n\n\t\t\treturn Reflect.get(target, prop, receiver);\n\t\t},\n\n\t\tgetOwnPropertyDescriptor(target, prop) {\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\tif (descriptor && 'value' in descriptor) {\n\t\t\t\tvar s = sources.get(prop);\n\t\t\t\tif (s) descriptor.value = get(s);\n\t\t\t} else if (descriptor === undefined) {\n\t\t\t\tvar source = sources.get(prop);\n\t\t\t\tvar value = source?.v;\n\n\t\t\t\tif (source !== undefined && value !== UNINITIALIZED) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\twritable: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn descriptor;\n\t\t},\n\n\t\thas(target, prop) {\n\t\t\tif (prop === STATE_SYMBOL) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = (s !== undefined && s.v !== UNINITIALIZED) || Reflect.has(target, prop);\n\n\t\t\tif (\n\t\t\t\ts !== undefined ||\n\t\t\t\t(active_effect !== null && (!has || get_descriptor(target, prop)?.writable))\n\t\t\t) {\n\t\t\t\tif (s === undefined) {\n\t\t\t\t\ts = with_parent(() => {\n\t\t\t\t\t\tvar p = has ? proxy(target[prop]) : UNINITIALIZED;\n\t\t\t\t\t\tvar s = source(p, stack);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t});\n\n\t\t\t\t\tsources.set(prop, s);\n\t\t\t\t}\n\n\t\t\t\tvar value = get(s);\n\t\t\t\tif (value === UNINITIALIZED) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn has;\n\t\t},\n\n\t\tset(target, prop, value, receiver) {\n\t\t\tvar s = sources.get(prop);\n\t\t\tvar has = prop in target;\n\n\t\t\t// variable.length = value -> clear all signals with index >= value\n\t\t\tif (is_proxied_array && prop === 'length') {\n\t\t\t\tfor (var i = value; i < /** @type {Source<number>} */ (s).v; i += 1) {\n\t\t\t\t\tvar other_s = sources.get(i + '');\n\t\t\t\t\tif (other_s !== undefined) {\n\t\t\t\t\t\tset(other_s, UNINITIALIZED);\n\t\t\t\t\t} else if (i in target) {\n\t\t\t\t\t\t// If the item exists in the original, we need to create a uninitialized source,\n\t\t\t\t\t\t// else a later read of the property would result in a source being created with\n\t\t\t\t\t\t// the value of the original item at that index.\n\t\t\t\t\t\tother_s = with_parent(() => source(UNINITIALIZED, stack));\n\t\t\t\t\t\tsources.set(i + '', other_s);\n\n\t\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\t\ttag(other_s, get_label(path, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we haven't yet created a source for this property, we need to ensure\n\t\t\t// we do so otherwise if we read it later, then the write won't be tracked and\n\t\t\t// the heuristics of effects will be different vs if we had read the proxied\n\t\t\t// object property before writing to that property.\n\t\t\tif (s === undefined) {\n\t\t\t\tif (!has || get_descriptor(target, prop)?.writable) {\n\t\t\t\t\ts = with_parent(() => {\n\t\t\t\t\t\tvar s = source(undefined, stack);\n\t\t\t\t\t\tset(s, proxy(value));\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t});\n\n\t\t\t\t\tsources.set(prop, s);\n\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\ttag(s, get_label(path, prop));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thas = s.v !== UNINITIALIZED;\n\n\t\t\t\tvar p = with_parent(() => proxy(value));\n\t\t\t\tset(s, p);\n\t\t\t}\n\n\t\t\tvar descriptor = Reflect.getOwnPropertyDescriptor(target, prop);\n\n\t\t\t// Set the new value before updating any signals so that any listeners get the new value\n\t\t\tif (descriptor?.set) {\n\t\t\t\tdescriptor.set.call(receiver, value);\n\t\t\t}\n\n\t\t\tif (!has) {\n\t\t\t\t// If we have mutated an array directly, we might need to\n\t\t\t\t// signal that length has also changed. Do it before updating metadata\n\t\t\t\t// to ensure that iterating over the array as a result of a metadata update\n\t\t\t\t// will not cause the length to be out of sync.\n\t\t\t\tif (is_proxied_array && typeof prop === 'string') {\n\t\t\t\t\tvar ls = /** @type {Source<number>} */ (sources.get('length'));\n\t\t\t\t\tvar n = Number(prop);\n\n\t\t\t\t\tif (Number.isInteger(n) && n >= ls.v) {\n\t\t\t\t\t\tset(ls, n + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tupdate_version(version);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\townKeys(target) {\n\t\t\tget(version);\n\n\t\t\tvar own_keys = Reflect.ownKeys(target).filter((key) => {\n\t\t\t\tvar source = sources.get(key);\n\t\t\t\treturn source === undefined || source.v !== UNINITIALIZED;\n\t\t\t});\n\n\t\t\tfor (var [key, source] of sources) {\n\t\t\t\tif (source.v !== UNINITIALIZED && !(key in target)) {\n\t\t\t\t\town_keys.push(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn own_keys;\n\t\t},\n\n\t\tsetPrototypeOf() {\n\t\t\te.state_prototype_fixed();\n\t\t}\n\t});\n}\n\n/**\n * @param {string} path\n * @param {string | symbol} prop\n */\nfunction get_label(path, prop) {\n\tif (typeof prop === 'symbol') return `${path}[Symbol(${prop.description ?? ''})]`;\n\tif (regex_is_valid_identifier.test(prop)) return `${path}.${prop}`;\n\treturn /^\\d+$/.test(prop) ? `${path}[${prop}]` : `${path}['${prop}']`;\n}\n\n/**\n * @param {Source<number>} signal\n * @param {1 | -1} [d]\n */\nfunction update_version(signal, d = 1) {\n\tset(signal, signal.v + d);\n}\n\n/**\n * @param {any} value\n */\nexport function get_proxied_value(value) {\n\ttry {\n\t\tif (value !== null && typeof value === 'object' && STATE_SYMBOL in value) {\n\t\t\treturn value[STATE_SYMBOL];\n\t\t}\n\t} catch {\n\t\t// the above if check can throw an error if the value in question\n\t\t// is the contentWindow of an iframe on another domain, in which\n\t\t// case we want to just return the value (because it's definitely\n\t\t// not a proxied value) so we don't break any JavaScript interacting\n\t\t// with that iframe (such as various payment companies client side\n\t\t// JavaScript libraries interacting with their iframes on the same\n\t\t// domain)\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {any} a\n * @param {any} b\n */\nexport function is(a, b) {\n\treturn Object.is(get_proxied_value(a), get_proxied_value(b));\n}\n","/** @import { Derived, Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport { CLEAN, DERIVED, DIRTY, EFFECT_HAS_DERIVED, MAYBE_DIRTY, UNOWNED } from '#client/constants';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tset_signal_status,\n\tskip_reaction,\n\tupdate_reaction,\n\tincrement_write_version,\n\tset_active_effect,\n\tpush_reaction_value,\n\tis_destroying_effect\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport { destroy_effect } from './effects.js';\nimport { inspect_effects, set_inspect_effects } from './sources.js';\nimport { get_stack } from '../dev/tracing.js';\nimport { tracing_mode_flag } from '../../flags/index.js';\nimport { component_context } from '../context.js';\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived(fn) {\n\tvar flags = DERIVED | DIRTY;\n\tvar parent_derived =\n\t\tactive_reaction !== null && (active_reaction.f & DERIVED) !== 0\n\t\t\t? /** @type {Derived} */ (active_reaction)\n\t\t\t: null;\n\n\tif (active_effect === null || (parent_derived !== null && (parent_derived.f & UNOWNED) !== 0)) {\n\t\tflags |= UNOWNED;\n\t} else {\n\t\t// Since deriveds are evaluated lazily, any effects created inside them are\n\t\t// created too late to ensure that the parent effect is added to the tree\n\t\tactive_effect.f |= EFFECT_HAS_DERIVED;\n\t}\n\n\t/** @type {Derived<V>} */\n\tconst signal = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\teffects: null,\n\t\tequals,\n\t\tf: flags,\n\t\tfn,\n\t\treactions: null,\n\t\trv: 0,\n\t\tv: /** @type {V} */ (null),\n\t\twv: 0,\n\t\tparent: parent_derived ?? active_effect\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = get_stack('CreatedAt');\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function user_derived(fn) {\n\tconst d = derived(fn);\n\n\tpush_reaction_value(d);\n\n\treturn d;\n}\n\n/**\n * @template V\n * @param {() => V} fn\n * @returns {Derived<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function derived_safe_equal(fn) {\n\tconst signal = derived(fn);\n\tsignal.equals = safe_equals;\n\treturn signal;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function destroy_derived_effects(derived) {\n\tvar effects = derived.effects;\n\n\tif (effects !== null) {\n\t\tderived.effects = null;\n\n\t\tfor (var i = 0; i < effects.length; i += 1) {\n\t\t\tdestroy_effect(/** @type {Effect} */ (effects[i]));\n\t\t}\n\t}\n}\n\n/**\n * The currently updating deriveds, used to detect infinite recursion\n * in dev mode and provide a nicer error than 'too much recursion'\n * @type {Derived[]}\n */\nlet stack = [];\n\n/**\n * @param {Derived} derived\n * @returns {Effect | null}\n */\nfunction get_derived_parent_effect(derived) {\n\tvar parent = derived.parent;\n\twhile (parent !== null) {\n\t\tif ((parent.f & DERIVED) === 0) {\n\t\t\treturn /** @type {Effect} */ (parent);\n\t\t}\n\t\tparent = parent.parent;\n\t}\n\treturn null;\n}\n\n/**\n * @template T\n * @param {Derived} derived\n * @returns {T}\n */\nexport function execute_derived(derived) {\n\tvar value;\n\tvar prev_active_effect = active_effect;\n\n\tset_active_effect(get_derived_parent_effect(derived));\n\n\tif (DEV) {\n\t\tlet prev_inspect_effects = inspect_effects;\n\t\tset_inspect_effects(new Set());\n\t\ttry {\n\t\t\tif (stack.includes(derived)) {\n\t\t\t\te.derived_references_self();\n\t\t\t}\n\n\t\t\tstack.push(derived);\n\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t\tset_inspect_effects(prev_inspect_effects);\n\t\t\tstack.pop();\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tdestroy_derived_effects(derived);\n\t\t\tvalue = update_reaction(derived);\n\t\t} finally {\n\t\t\tset_active_effect(prev_active_effect);\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @param {Derived} derived\n * @returns {void}\n */\nexport function update_derived(derived) {\n\tvar value = execute_derived(derived);\n\n\tif (!derived.equals(value)) {\n\t\tderived.v = value;\n\t\tderived.wv = increment_write_version();\n\t}\n\n\t// don't mark derived clean if we're reading it inside a\n\t// cleanup function, or it will cache a stale value\n\tif (is_destroying_effect) return;\n\n\tvar status =\n\t\t(skip_reaction || (derived.f & UNOWNED) !== 0) && derived.deps !== null ? MAYBE_DIRTY : CLEAN;\n\n\tset_signal_status(derived, status);\n}\n","/** @import { Derived, Effect, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport {\n\tactive_reaction,\n\tactive_effect,\n\tuntracked_writes,\n\tget,\n\tschedule_effect,\n\tset_untracked_writes,\n\tset_signal_status,\n\tuntrack,\n\tincrement_write_version,\n\tupdate_effect,\n\treaction_sources,\n\tcheck_dirtiness,\n\tuntracking,\n\tis_destroying_effect,\n\tpush_reaction_value\n} from '../runtime.js';\nimport { equals, safe_equals } from './equality.js';\nimport {\n\tCLEAN,\n\tDERIVED,\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tINSPECT_EFFECT,\n\tUNOWNED,\n\tMAYBE_DIRTY,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT\n} from '#client/constants';\nimport * as e from '../errors.js';\nimport { legacy_mode_flag, tracing_mode_flag } from '../../flags/index.js';\nimport { get_stack, tag_proxy } from '../dev/tracing.js';\nimport { component_context, is_runes } from '../context.js';\nimport { proxy } from '../proxy.js';\nimport { execute_derived } from './deriveds.js';\n\nexport let inspect_effects = new Set();\n\n/** @type {Map<Source, any>} */\nexport const old_values = new Map();\n\n/**\n * @param {Set<any>} v\n */\nexport function set_inspect_effects(v) {\n\tinspect_effects = v;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n * @returns {Source<V>}\n */\n// TODO rename this to `state` throughout the codebase\nexport function source(v, stack) {\n\t/** @type {Value} */\n\tvar signal = {\n\t\tf: 0, // TODO ideally we could skip this altogether, but it causes type errors\n\t\tv,\n\t\treactions: null,\n\t\tequals,\n\t\trv: 0,\n\t\twv: 0\n\t};\n\n\tif (DEV && tracing_mode_flag) {\n\t\tsignal.created = stack ?? get_stack('CreatedAt');\n\t\tsignal.updated = null;\n\t\tsignal.set_during_effect = false;\n\t\tsignal.trace = null;\n\t}\n\n\treturn signal;\n}\n\n/**\n * @template V\n * @param {V} v\n * @param {Error | null} [stack]\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function state(v, stack) {\n\tconst s = source(v, stack);\n\n\tpush_reaction_value(s);\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {V} initial_value\n * @param {boolean} [immutable]\n * @returns {Source<V>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function mutable_source(initial_value, immutable = false, trackable = true) {\n\tconst s = source(initial_value);\n\tif (!immutable) {\n\t\ts.equals = safe_equals;\n\t}\n\n\t// bind the signal to the component context, in case we need to\n\t// track updates to trigger beforeUpdate/afterUpdate callbacks\n\tif (legacy_mode_flag && trackable && component_context !== null && component_context.l !== null) {\n\t\t(component_context.l.s ??= []).push(s);\n\t}\n\n\treturn s;\n}\n\n/**\n * @template V\n * @param {Value<V>} source\n * @param {V} value\n */\nexport function mutate(source, value) {\n\tset(\n\t\tsource,\n\t\tuntrack(() => get(source))\n\t);\n\treturn value;\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @param {boolean} [should_proxy]\n * @returns {V}\n */\nexport function set(source, value, should_proxy = false) {\n\tif (\n\t\tactive_reaction !== null &&\n\t\t!untracking &&\n\t\tis_runes() &&\n\t\t(active_reaction.f & (DERIVED | BLOCK_EFFECT)) !== 0 &&\n\t\t!reaction_sources?.includes(source)\n\t) {\n\t\te.state_unsafe_mutation();\n\t}\n\n\tlet new_value = should_proxy ? proxy(value) : value;\n\n\tif (DEV) {\n\t\ttag_proxy(new_value, /** @type {string} */ (source.label));\n\t}\n\n\treturn internal_set(source, new_value);\n}\n\n/**\n * @template V\n * @param {Source<V>} source\n * @param {V} value\n * @returns {V}\n */\nexport function internal_set(source, value) {\n\tif (!source.equals(value)) {\n\t\tvar old_value = source.v;\n\n\t\tif (is_destroying_effect) {\n\t\t\told_values.set(source, value);\n\t\t} else {\n\t\t\told_values.set(source, old_value);\n\t\t}\n\n\t\tsource.v = value;\n\n\t\tif (DEV && tracing_mode_flag) {\n\t\t\tsource.updated = get_stack('UpdatedAt');\n\n\t\t\tif (active_effect !== null) {\n\t\t\t\tsource.set_during_effect = true;\n\t\t\t}\n\t\t}\n\n\t\tif ((source.f & DERIVED) !== 0) {\n\t\t\t// if we are assigning to a dirty derived we set it to clean/maybe dirty but we also eagerly execute it to track the dependencies\n\t\t\tif ((source.f & DIRTY) !== 0) {\n\t\t\t\texecute_derived(/** @type {Derived} */ (source));\n\t\t\t}\n\t\t\tset_signal_status(source, (source.f & UNOWNED) === 0 ? CLEAN : MAYBE_DIRTY);\n\t\t}\n\n\t\tsource.wv = increment_write_version();\n\n\t\tmark_reactions(source, DIRTY);\n\n\t\t// It's possible that the current reaction might not have up-to-date dependencies\n\t\t// whilst it's actively running. So in the case of ensuring it registers the reaction\n\t\t// properly for itself, we need to ensure the current effect actually gets\n\t\t// scheduled. i.e: `$effect(() => x++)`\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tactive_effect !== null &&\n\t\t\t(active_effect.f & CLEAN) !== 0 &&\n\t\t\t(active_effect.f & (BRANCH_EFFECT | ROOT_EFFECT)) === 0\n\t\t) {\n\t\t\tif (untracked_writes === null) {\n\t\t\t\tset_untracked_writes([source]);\n\t\t\t} else {\n\t\t\t\tuntracked_writes.push(source);\n\t\t\t}\n\t\t}\n\n\t\tif (DEV && inspect_effects.size > 0) {\n\t\t\tconst inspects = Array.from(inspect_effects);\n\n\t\t\tfor (const effect of inspects) {\n\t\t\t\t// Mark clean inspect-effects as maybe dirty and then check their dirtiness\n\t\t\t\t// instead of just updating the effects - this way we avoid overfiring.\n\t\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t\t}\n\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinspect_effects.clear();\n\t\t}\n\t}\n\n\treturn value;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update(source, d = 1) {\n\tvar value = get(source);\n\tvar result = d === 1 ? value++ : value--;\n\n\tset(source, value);\n\n\t// @ts-expect-error\n\treturn result;\n}\n\n/**\n * @template {number | bigint} T\n * @param {Source<T>} source\n * @param {1 | -1} [d]\n * @returns {T}\n */\nexport function update_pre(source, d = 1) {\n\tvar value = get(source);\n\n\t// @ts-expect-error\n\treturn set(source, d === 1 ? ++value : --value);\n}\n\n/**\n * @param {Value} signal\n * @param {number} status should be DIRTY or MAYBE_DIRTY\n * @returns {void}\n */\nfunction mark_reactions(signal, status) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tvar runes = is_runes();\n\tvar length = reactions.length;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar reaction = reactions[i];\n\t\tvar flags = reaction.f;\n\n\t\t// Skip any effects that are already dirty\n\t\tif ((flags & DIRTY) !== 0) continue;\n\n\t\t// In legacy mode, skip the current effect to prevent infinite loops\n\t\tif (!runes && reaction === active_effect) continue;\n\n\t\t// Inspect effects need to run immediately, so that the stack trace makes sense\n\t\tif (DEV && (flags & INSPECT_EFFECT) !== 0) {\n\t\t\tinspect_effects.add(reaction);\n\t\t\tcontinue;\n\t\t}\n\n\t\tset_signal_status(reaction, status);\n\n\t\t// If the signal a) was previously clean or b) is an unowned derived, then mark it\n\t\tif ((flags & (CLEAN | UNOWNED)) !== 0) {\n\t\t\tif ((flags & DERIVED) !== 0) {\n\t\t\t\tmark_reactions(/** @type {Derived} */ (reaction), MAYBE_DIRTY);\n\t\t\t} else {\n\t\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t\t}\n\t\t}\n\t}\n}\n","/* This file is generated by scripts/process-messages/index.js. Do not edit! */\n\nimport { DEV } from 'esm-env';\n\nvar bold = 'font-weight: bold';\nvar normal = 'font-weight: normal';\n\n/**\n * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.\n * @param {string} property\n * @param {string} location\n */\nexport function assignment_value_stale(property, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] assignment_value_stale\\n%cAssignment to \\`${property}\\` property (${location}) will evaluate to the right-hand side, not the value of \\`${property}\\` following the assignment. This may result in unexpected behaviour.\\nhttps://svelte.dev/e/assignment_value_stale`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/assignment_value_stale`);\n\t}\n}\n\n/**\n * `%binding%` (%location%) is binding to a non-reactive property\n * @param {string} binding\n * @param {string | undefined | null} [location]\n */\nexport function binding_property_non_reactive(binding, location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] binding_property_non_reactive\\n%c${location ? `\\`${binding}\\` (${location}) is binding to a non-reactive property` : `\\`${binding}\\` is binding to a non-reactive property`}\\nhttps://svelte.dev/e/binding_property_non_reactive`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/binding_property_non_reactive`);\n\t}\n}\n\n/**\n * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead\n * @param {string} method\n */\nexport function console_log_state(method) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] console_log_state\\n%cYour \\`console.${method}\\` contained \\`$state\\` proxies. Consider using \\`$inspect(...)\\` or \\`$state.snapshot(...)\\` instead\\nhttps://svelte.dev/e/console_log_state`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/console_log_state`);\n\t}\n}\n\n/**\n * %handler% should be a function. Did you mean to %suggestion%?\n * @param {string} handler\n * @param {string} suggestion\n */\nexport function event_handler_invalid(handler, suggestion) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] event_handler_invalid\\n%c${handler} should be a function. Did you mean to ${suggestion}?\\nhttps://svelte.dev/e/event_handler_invalid`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/event_handler_invalid`);\n\t}\n}\n\n/**\n * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value\n * @param {string} attribute\n * @param {string} html\n * @param {string} value\n */\nexport function hydration_attribute_changed(attribute, html, value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_attribute_changed\\n%cThe \\`${attribute}\\` attribute on \\`${html}\\` changed its value between server and client renders. The client value, \\`${value}\\`, will be ignored in favour of the server value\\nhttps://svelte.dev/e/hydration_attribute_changed`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_attribute_changed`);\n\t}\n}\n\n/**\n * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value\n * @param {string | undefined | null} [location]\n */\nexport function hydration_html_changed(location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_html_changed\\n%c${location ? `The value of an \\`{@html ...}\\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : 'The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value'}\\nhttps://svelte.dev/e/hydration_html_changed`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_html_changed`);\n\t}\n}\n\n/**\n * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%\n * @param {string | undefined | null} [location]\n */\nexport function hydration_mismatch(location) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] hydration_mismatch\\n%c${location ? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}` : 'Hydration failed because the initial UI does not match what was rendered on the server'}\\nhttps://svelte.dev/e/hydration_mismatch`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/hydration_mismatch`);\n\t}\n}\n\n/**\n * The `render` function passed to `createRawSnippet` should return HTML for a single element\n */\nexport function invalid_raw_snippet_render() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] invalid_raw_snippet_render\\n%cThe \\`render\\` function passed to \\`createRawSnippet\\` should return HTML for a single element\\nhttps://svelte.dev/e/invalid_raw_snippet_render`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/invalid_raw_snippet_render`);\n\t}\n}\n\n/**\n * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.\n * @param {string} filename\n */\nexport function legacy_recursive_reactive_block(filename) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] legacy_recursive_reactive_block\\n%cDetected a migrated \\`$:\\` reactive block in \\`${filename}\\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \\`$effect\\`.\\nhttps://svelte.dev/e/legacy_recursive_reactive_block`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/legacy_recursive_reactive_block`);\n\t}\n}\n\n/**\n * Tried to unmount a component that was not mounted\n */\nexport function lifecycle_double_unmount() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] lifecycle_double_unmount\\n%cTried to unmount a component that was not mounted\\nhttps://svelte.dev/e/lifecycle_double_unmount`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/lifecycle_double_unmount`);\n\t}\n}\n\n/**\n * %parent% passed property `%prop%` to %child% with `bind:`, but its parent component %owner% did not declare `%prop%` as a binding. Consider creating a binding between %owner% and %parent% (e.g. `bind:%prop%={...}` instead of `%prop%={...}`)\n * @param {string} parent\n * @param {string} prop\n * @param {string} child\n * @param {string} owner\n */\nexport function ownership_invalid_binding(parent, prop, child, owner) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_binding\\n%c${parent} passed property \\`${prop}\\` to ${child} with \\`bind:\\`, but its parent component ${owner} did not declare \\`${prop}\\` as a binding. Consider creating a binding between ${owner} and ${parent} (e.g. \\`bind:${prop}={...}\\` instead of \\`${prop}={...}\\`)\\nhttps://svelte.dev/e/ownership_invalid_binding`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_binding`);\n\t}\n}\n\n/**\n * Mutating unbound props (`%name%`, at %location%) is strongly discouraged. Consider using `bind:%prop%={...}` in %parent% (or using a callback) instead\n * @param {string} name\n * @param {string} location\n * @param {string} prop\n * @param {string} parent\n */\nexport function ownership_invalid_mutation(name, location, prop, parent) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] ownership_invalid_mutation\\n%cMutating unbound props (\\`${name}\\`, at ${location}) is strongly discouraged. Consider using \\`bind:${prop}={...}\\` in ${parent} (or using a callback) instead\\nhttps://svelte.dev/e/ownership_invalid_mutation`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/ownership_invalid_mutation`);\n\t}\n}\n\n/**\n * The `value` property of a `<select multiple>` element should be an array, but it received a non-array value. The selection will be kept as is.\n */\nexport function select_multiple_invalid_value() {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] select_multiple_invalid_value\\n%cThe \\`value\\` property of a \\`<select multiple>\\` element should be an array, but it received a non-array value. The selection will be kept as is.\\nhttps://svelte.dev/e/select_multiple_invalid_value`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/select_multiple_invalid_value`);\n\t}\n}\n\n/**\n * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results\n * @param {string} operator\n */\nexport function state_proxy_equality_mismatch(operator) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] state_proxy_equality_mismatch\\n%cReactive \\`$state(...)\\` proxies and the values they proxy have different identities. Because of this, comparisons with \\`${operator}\\` will produce unexpected results\\nhttps://svelte.dev/e/state_proxy_equality_mismatch`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/state_proxy_equality_mismatch`);\n\t}\n}\n\n/**\n * The `slide` transition does not work correctly for elements with `display: %value%`\n * @param {string} value\n */\nexport function transition_slide_display(value) {\n\tif (DEV) {\n\t\tconsole.warn(`%c[svelte] transition_slide_display\\n%cThe \\`slide\\` transition does not work correctly for elements with \\`display: ${value}\\`\\nhttps://svelte.dev/e/transition_slide_display`, bold, normal);\n\t} else {\n\t\tconsole.warn(`https://svelte.dev/e/transition_slide_display`);\n\t}\n}","/** @import { TemplateNode } from '#client' */\n\nimport {\n\tHYDRATION_END,\n\tHYDRATION_ERROR,\n\tHYDRATION_START,\n\tHYDRATION_START_ELSE\n} from '../../../constants.js';\nimport * as w from '../warnings.js';\nimport { get_next_sibling } from './operations.js';\n\n/**\n * Use this variable to guard everything related to hydration code so it can be treeshaken out\n * if the user doesn't use the `hydrate` method and these code paths are therefore not needed.\n */\nexport let hydrating = false;\n\n/** @param {boolean} value */\nexport function set_hydrating(value) {\n\thydrating = value;\n}\n\n/**\n * The node that is currently being hydrated. This starts out as the first node inside the opening\n * <!--[--> comment, and updates each time a component calls `$.child(...)` or `$.sibling(...)`.\n * When entering a block (e.g. `{#if ...}`), `hydrate_node` is the block opening comment; by the\n * time we leave the block it is the closing comment, which serves as the block's anchor.\n * @type {TemplateNode}\n */\nexport let hydrate_node;\n\n/** @param {TemplateNode} node */\nexport function set_hydrate_node(node) {\n\tif (node === null) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\treturn (hydrate_node = node);\n}\n\nexport function hydrate_next() {\n\treturn set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(hydrate_node)));\n}\n\n/** @param {TemplateNode} node */\nexport function reset(node) {\n\tif (!hydrating) return;\n\n\t// If the node has remaining siblings, something has gone wrong\n\tif (get_next_sibling(hydrate_node) !== null) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\thydrate_node = node;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n */\nexport function hydrate_template(template) {\n\tif (hydrating) {\n\t\t// @ts-expect-error TemplateNode doesn't include DocumentFragment, but it's actually fine\n\t\thydrate_node = template.content;\n\t}\n}\n\nexport function next(count = 1) {\n\tif (hydrating) {\n\t\tvar i = count;\n\t\tvar node = hydrate_node;\n\n\t\twhile (i--) {\n\t\t\tnode = /** @type {TemplateNode} */ (get_next_sibling(node));\n\t\t}\n\n\t\thydrate_node = node;\n\t}\n}\n\n/**\n * Removes all nodes starting at `hydrate_node` up until the next hydration end comment\n */\nexport function remove_nodes() {\n\tvar depth = 0;\n\tvar node = hydrate_node;\n\n\twhile (true) {\n\t\tif (node.nodeType === 8) {\n\t\t\tvar data = /** @type {Comment} */ (node).data;\n\n\t\t\tif (data === HYDRATION_END) {\n\t\t\t\tif (depth === 0) return node;\n\t\t\t\tdepth -= 1;\n\t\t\t} else if (data === HYDRATION_START || data === HYDRATION_START_ELSE) {\n\t\t\t\tdepth += 1;\n\t\t\t}\n\t\t}\n\n\t\tvar next = /** @type {TemplateNode} */ (get_next_sibling(node));\n\t\tnode.remove();\n\t\tnode = next;\n\t}\n}\n\n/**\n *\n * @param {TemplateNode} node\n */\nexport function read_hydration_instruction(node) {\n\tif (!node || node.nodeType !== 8) {\n\t\tw.hydration_mismatch();\n\t\tthrow HYDRATION_ERROR;\n\t}\n\n\treturn /** @type {Comment} */ (node).data;\n}\n","/** @import { TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node } from './hydration.js';\nimport { DEV } from 'esm-env';\nimport { init_array_prototype_warnings } from '../dev/equality.js';\nimport { get_descriptor, is_extensible } from '../../shared/utils.js';\n\n// export these for reference in the compiled code, making global name deduplication unnecessary\n/** @type {Window} */\nexport var $window;\n\n/** @type {Document} */\nexport var $document;\n\n/** @type {boolean} */\nexport var is_firefox;\n\n/** @type {() => Node | null} */\nvar first_child_getter;\n/** @type {() => Node | null} */\nvar next_sibling_getter;\n\n/**\n * Initialize these lazily to avoid issues when using the runtime in a server context\n * where these globals are not available while avoiding a separate server entry point\n */\nexport function init_operations() {\n\tif ($window !== undefined) {\n\t\treturn;\n\t}\n\n\t$window = window;\n\t$document = document;\n\tis_firefox = /Firefox/.test(navigator.userAgent);\n\n\tvar element_prototype = Element.prototype;\n\tvar node_prototype = Node.prototype;\n\tvar text_prototype = Text.prototype;\n\n\t// @ts-ignore\n\tfirst_child_getter = get_descriptor(node_prototype, 'firstChild').get;\n\t// @ts-ignore\n\tnext_sibling_getter = get_descriptor(node_prototype, 'nextSibling').get;\n\n\tif (is_extensible(element_prototype)) {\n\t\t// the following assignments improve perf of lookups on DOM nodes\n\t\t// @ts-expect-error\n\t\telement_prototype.__click = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__className = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__attributes = null;\n\t\t// @ts-expect-error\n\t\telement_prototype.__style = undefined;\n\t\t// @ts-expect-error\n\t\telement_prototype.__e = undefined;\n\t}\n\n\tif (is_extensible(text_prototype)) {\n\t\t// @ts-expect-error\n\t\ttext_prototype.__t = undefined;\n\t}\n\n\tif (DEV) {\n\t\t// @ts-expect-error\n\t\telement_prototype.__svelte_meta = null;\n\n\t\tinit_array_prototype_warnings();\n\t}\n}\n\n/**\n * @param {string} value\n * @returns {Text}\n */\nexport function create_text(value = '') {\n\treturn document.createTextNode(value);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_first_child(node) {\n\treturn first_child_getter.call(node);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {Node | null}\n */\n/*@__NO_SIDE_EFFECTS__*/\nexport function get_next_sibling(node) {\n\treturn next_sibling_getter.call(node);\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @template {Node} N\n * @param {N} node\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function child(node, is_text) {\n\tif (!hydrating) {\n\t\treturn get_first_child(node);\n\t}\n\n\tvar child = /** @type {TemplateNode} */ (get_first_child(hydrate_node));\n\n\t// Child can be null if we have an element with a single child, like `<p>{text}</p>`, where `text` is empty\n\tif (child === null) {\n\t\tchild = hydrate_node.appendChild(create_text());\n\t} else if (is_text && child.nodeType !== 3) {\n\t\tvar text = create_text();\n\t\tchild?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(child);\n\treturn child;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {DocumentFragment | TemplateNode[]} fragment\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function first_child(fragment, is_text) {\n\tif (!hydrating) {\n\t\t// when not hydrating, `fragment` is a `DocumentFragment` (the result of calling `open_frag`)\n\t\tvar first = /** @type {DocumentFragment} */ (get_first_child(/** @type {Node} */ (fragment)));\n\n\t\t// TODO prevent user comments with the empty string when preserveComments is true\n\t\tif (first instanceof Comment && first.data === '') return get_next_sibling(first);\n\n\t\treturn first;\n\t}\n\n\t// if an {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && hydrate_node?.nodeType !== 3) {\n\t\tvar text = create_text();\n\n\t\thydrate_node?.before(text);\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\treturn hydrate_node;\n}\n\n/**\n * Don't mark this as side-effect-free, hydration needs to walk all nodes\n * @param {TemplateNode} node\n * @param {number} count\n * @param {boolean} is_text\n * @returns {Node | null}\n */\nexport function sibling(node, count = 1, is_text = false) {\n\tlet next_sibling = hydrating ? hydrate_node : node;\n\tvar last_sibling;\n\n\twhile (count--) {\n\t\tlast_sibling = next_sibling;\n\t\tnext_sibling = /** @type {TemplateNode} */ (get_next_sibling(next_sibling));\n\t}\n\n\tif (!hydrating) {\n\t\treturn next_sibling;\n\t}\n\n\tvar type = next_sibling?.nodeType;\n\n\t// if a sibling {expression} is empty during SSR, there might be no\n\t// text node to hydrate — we must therefore create one\n\tif (is_text && type !== 3) {\n\t\tvar text = create_text();\n\t\t// If the next sibling is `null` and we're handling text then it's because\n\t\t// the SSR content was empty for the text, so we need to generate a new text\n\t\t// node and insert it after the last sibling\n\t\tif (next_sibling === null) {\n\t\t\tlast_sibling?.after(text);\n\t\t} else {\n\t\t\tnext_sibling.before(text);\n\t\t}\n\t\tset_hydrate_node(text);\n\t\treturn text;\n\t}\n\n\tset_hydrate_node(next_sibling);\n\treturn /** @type {TemplateNode} */ (next_sibling);\n}\n\n/**\n * @template {Node} N\n * @param {N} node\n * @returns {void}\n */\nexport function clear_text_content(node) {\n\tnode.textContent = '';\n}\n\n/**\n *\n * @param {string} tag\n * @param {string} [namespace]\n * @param {string} [is]\n * @returns\n */\nexport function create_element(tag, namespace, is) {\n\tlet options = is ? { is } : undefined;\n\tif (namespace) {\n\t\treturn document.createElementNS(namespace, tag, options);\n\t}\n\treturn document.createElement(tag, options);\n}\n\nexport function create_fragment() {\n\treturn document.createDocumentFragment();\n}\n\n/**\n * @param {string} data\n * @returns\n */\nexport function create_comment(data = '') {\n\treturn document.createComment(data);\n}\n\n/**\n * @param {Element} element\n * @param {string} key\n * @param {string} value\n * @returns\n */\nexport function set_attribute(element, key, value = '') {\n\tif (key.startsWith('xlink:')) {\n\t\telement.setAttributeNS('http://www.w3.org/1999/xlink', key, value);\n\t\treturn;\n\t}\n\treturn element.setAttribute(key, value);\n}\n","/** @import { ComponentContext, ComponentContextLegacy, Derived, Effect, TemplateNode, TransitionManager } from '#client' */\nimport {\n\tcheck_dirtiness,\n\tactive_effect,\n\tactive_reaction,\n\tupdate_effect,\n\tget,\n\tis_destroying_effect,\n\tremove_reactions,\n\tschedule_effect,\n\tset_active_reaction,\n\tset_is_destroying_effect,\n\tset_signal_status,\n\tuntrack,\n\tuntracking\n} from '../runtime.js';\nimport {\n\tDIRTY,\n\tBRANCH_EFFECT,\n\tRENDER_EFFECT,\n\tEFFECT,\n\tDESTROYED,\n\tINERT,\n\tEFFECT_RAN,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tEFFECT_TRANSPARENT,\n\tDERIVED,\n\tUNOWNED,\n\tCLEAN,\n\tINSPECT_EFFECT,\n\tHEAD_EFFECT,\n\tMAYBE_DIRTY,\n\tEFFECT_HAS_DERIVED,\n\tBOUNDARY_EFFECT\n} from '#client/constants';\nimport { set } from './sources.js';\nimport * as e from '../errors.js';\nimport { DEV } from 'esm-env';\nimport { define_property } from '../../shared/utils.js';\nimport { get_next_sibling } from '../dom/operations.js';\nimport { derived } from './deriveds.js';\nimport { component_context, dev_current_component_function } from '../context.js';\n\n/**\n * @param {'$effect' | '$effect.pre' | '$inspect'} rune\n */\nexport function validate_effect(rune) {\n\tif (active_effect === null && active_reaction === null) {\n\t\te.effect_orphan(rune);\n\t}\n\n\tif (active_reaction !== null && (active_reaction.f & UNOWNED) !== 0 && active_effect === null) {\n\t\te.effect_in_unowned_derived();\n\t}\n\n\tif (is_destroying_effect) {\n\t\te.effect_in_teardown(rune);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {Effect} parent_effect\n */\nfunction push_effect(effect, parent_effect) {\n\tvar parent_last = parent_effect.last;\n\tif (parent_last === null) {\n\t\tparent_effect.last = parent_effect.first = effect;\n\t} else {\n\t\tparent_last.next = effect;\n\t\teffect.prev = parent_last;\n\t\tparent_effect.last = effect;\n\t}\n}\n\n/**\n * @param {number} type\n * @param {null | (() => void | (() => void))} fn\n * @param {boolean} sync\n * @param {boolean} push\n * @returns {Effect}\n */\nfunction create_effect(type, fn, sync, push = true) {\n\tvar parent = active_effect;\n\n\tif (DEV) {\n\t\t// Ensure the parent is never an inspect effect\n\t\twhile (parent !== null && (parent.f & INSPECT_EFFECT) !== 0) {\n\t\t\tparent = parent.parent;\n\t\t}\n\t}\n\n\t/** @type {Effect} */\n\tvar effect = {\n\t\tctx: component_context,\n\t\tdeps: null,\n\t\tnodes_start: null,\n\t\tnodes_end: null,\n\t\tf: type | DIRTY,\n\t\tfirst: null,\n\t\tfn,\n\t\tlast: null,\n\t\tnext: null,\n\t\tparent,\n\t\tprev: null,\n\t\tteardown: null,\n\t\ttransitions: null,\n\t\twv: 0\n\t};\n\n\tif (DEV) {\n\t\teffect.component_function = dev_current_component_function;\n\t}\n\n\tif (sync) {\n\t\ttry {\n\t\t\tupdate_effect(effect);\n\t\t\teffect.f |= EFFECT_RAN;\n\t\t} catch (e) {\n\t\t\tdestroy_effect(effect);\n\t\t\tthrow e;\n\t\t}\n\t} else if (fn !== null) {\n\t\tschedule_effect(effect);\n\t}\n\n\t// if an effect has no dependencies, no DOM and no teardown function,\n\t// don't bother adding it to the effect tree\n\tvar inert =\n\t\tsync &&\n\t\teffect.deps === null &&\n\t\teffect.first === null &&\n\t\teffect.nodes_start === null &&\n\t\teffect.teardown === null &&\n\t\t(effect.f & (EFFECT_HAS_DERIVED | BOUNDARY_EFFECT)) === 0;\n\n\tif (!inert && push) {\n\t\tif (parent !== null) {\n\t\t\tpush_effect(effect, parent);\n\t\t}\n\n\t\t// if we're in a derived, add the effect there too\n\t\tif (active_reaction !== null && (active_reaction.f & DERIVED) !== 0) {\n\t\t\tvar derived = /** @type {Derived} */ (active_reaction);\n\t\t\t(derived.effects ??= []).push(effect);\n\t\t}\n\t}\n\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect.tracking()`\n * @returns {boolean}\n */\nexport function effect_tracking() {\n\treturn active_reaction !== null && !untracking;\n}\n\n/**\n * @param {() => void} fn\n */\nexport function teardown(fn) {\n\tconst effect = create_effect(RENDER_EFFECT, null, false);\n\tset_signal_status(effect, CLEAN);\n\teffect.teardown = fn;\n\treturn effect;\n}\n\n/**\n * Internal representation of `$effect(...)`\n * @param {() => void | (() => void)} fn\n */\nexport function user_effect(fn) {\n\tvalidate_effect('$effect');\n\n\t// Non-nested `$effect(...)` in a component should be deferred\n\t// until the component is mounted\n\tvar defer =\n\t\tactive_effect !== null &&\n\t\t(active_effect.f & BRANCH_EFFECT) !== 0 &&\n\t\tcomponent_context !== null &&\n\t\t!component_context.m;\n\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect'\n\t\t});\n\t}\n\n\tif (defer) {\n\t\tvar context = /** @type {ComponentContext} */ (component_context);\n\t\t(context.e ??= []).push({\n\t\t\tfn,\n\t\t\teffect: active_effect,\n\t\t\treaction: active_reaction\n\t\t});\n\t} else {\n\t\tvar signal = effect(fn);\n\t\treturn signal;\n\t}\n}\n\n/**\n * Internal representation of `$effect.pre(...)`\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function user_pre_effect(fn) {\n\tvalidate_effect('$effect.pre');\n\tif (DEV) {\n\t\tdefine_property(fn, 'name', {\n\t\t\tvalue: '$effect.pre'\n\t\t});\n\t}\n\treturn render_effect(fn);\n}\n\n/** @param {() => void | (() => void)} fn */\nexport function inspect_effect(fn) {\n\treturn create_effect(INSPECT_EFFECT, fn, true);\n}\n\n/**\n * Internal representation of `$effect.root(...)`\n * @param {() => void | (() => void)} fn\n * @returns {() => void}\n */\nexport function effect_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn () => {\n\t\tdestroy_effect(effect);\n\t};\n}\n\n/**\n * An effect root whose children can transition out\n * @param {() => void} fn\n * @returns {(options?: { outro?: boolean }) => Promise<void>}\n */\nexport function component_root(fn) {\n\tconst effect = create_effect(ROOT_EFFECT, fn, true);\n\n\treturn (options = {}) => {\n\t\treturn new Promise((fulfil) => {\n\t\t\tif (options.outro) {\n\t\t\t\tpause_effect(effect, () => {\n\t\t\t\t\tdestroy_effect(effect);\n\t\t\t\t\tfulfil(undefined);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdestroy_effect(effect);\n\t\t\t\tfulfil(undefined);\n\t\t\t}\n\t\t});\n\t};\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function effect(fn) {\n\treturn create_effect(EFFECT, fn, false);\n}\n\n/**\n * Internal representation of `$: ..`\n * @param {() => any} deps\n * @param {() => void | (() => void)} fn\n */\nexport function legacy_pre_effect(deps, fn) {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\t/** @type {{ effect: null | Effect, ran: boolean }} */\n\tvar token = { effect: null, ran: false };\n\tcontext.l.r1.push(token);\n\n\ttoken.effect = render_effect(() => {\n\t\tdeps();\n\n\t\t// If this legacy pre effect has already run before the end of the reset, then\n\t\t// bail out to emulate the same behavior.\n\t\tif (token.ran) return;\n\n\t\ttoken.ran = true;\n\t\tset(context.l.r2, true);\n\t\tuntrack(fn);\n\t});\n}\n\nexport function legacy_pre_effect_reset() {\n\tvar context = /** @type {ComponentContextLegacy} */ (component_context);\n\n\trender_effect(() => {\n\t\tif (!get(context.l.r2)) return;\n\n\t\t// Run dirty `$:` statements\n\t\tfor (var token of context.l.r1) {\n\t\t\tvar effect = token.effect;\n\n\t\t\t// If the effect is CLEAN, then make it MAYBE_DIRTY. This ensures we traverse through\n\t\t\t// the effects dependencies and correctly ensure each dependency is up-to-date.\n\t\t\tif ((effect.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(effect, MAYBE_DIRTY);\n\t\t\t}\n\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\tupdate_effect(effect);\n\t\t\t}\n\n\t\t\ttoken.ran = false;\n\t\t}\n\n\t\tcontext.l.r2.v = false; // set directly to avoid rerunning this effect\n\t});\n}\n\n/**\n * @param {() => void | (() => void)} fn\n * @returns {Effect}\n */\nexport function render_effect(fn) {\n\treturn create_effect(RENDER_EFFECT, fn, true);\n}\n\n/**\n * @param {(...expressions: any) => void | (() => void)} fn\n * @param {Array<() => any>} thunks\n * @param {<T>(fn: () => T) => Derived<T>} d\n * @returns {Effect}\n */\nexport function template_effect(fn, thunks = [], d = derived) {\n\tif (DEV) {\n\t\t// wrap the effect so that we can decorate stack trace with `in {expression}`\n\t\t// (TODO maybe there's a better approach?)\n\t\treturn render_effect(() => {\n\t\t\tvar outer = /** @type {Effect} */ (active_effect);\n\t\t\tvar inner = () => fn(...deriveds.map(get));\n\n\t\t\tdefine_property(outer.fn, 'name', { value: '{expression}' });\n\t\t\tdefine_property(inner, 'name', { value: '{expression}' });\n\n\t\t\tconst deriveds = thunks.map(d);\n\t\t\tblock(inner);\n\t\t});\n\t}\n\n\tconst deriveds = thunks.map(d);\n\treturn block(() => fn(...deriveds.map(get)));\n}\n\n/**\n * @param {(() => void)} fn\n * @param {number} flags\n */\nexport function block(fn, flags = 0) {\n\treturn create_effect(RENDER_EFFECT | BLOCK_EFFECT | flags, fn, true);\n}\n\n/**\n * @param {(() => void)} fn\n * @param {boolean} [push]\n */\nexport function branch(fn, push = true) {\n\treturn create_effect(RENDER_EFFECT | BRANCH_EFFECT, fn, true, push);\n}\n\n/**\n * @param {Effect} effect\n */\nexport function execute_effect_teardown(effect) {\n\tvar teardown = effect.teardown;\n\tif (teardown !== null) {\n\t\tconst previously_destroying_effect = is_destroying_effect;\n\t\tconst previous_reaction = active_reaction;\n\t\tset_is_destroying_effect(true);\n\t\tset_active_reaction(null);\n\t\ttry {\n\t\t\tteardown.call(null);\n\t\t} finally {\n\t\t\tset_is_destroying_effect(previously_destroying_effect);\n\t\t\tset_active_reaction(previous_reaction);\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @param {boolean} remove_dom\n * @returns {void}\n */\nexport function destroy_effect_children(signal, remove_dom = false) {\n\tvar effect = signal.first;\n\tsignal.first = signal.last = null;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\n\t\tif ((effect.f & ROOT_EFFECT) !== 0) {\n\t\t\t// this is now an independent root\n\t\t\teffect.parent = null;\n\t\t} else {\n\t\t\tdestroy_effect(effect, remove_dom);\n\t\t}\n\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function destroy_block_effect_children(signal) {\n\tvar effect = signal.first;\n\n\twhile (effect !== null) {\n\t\tvar next = effect.next;\n\t\tif ((effect.f & BRANCH_EFFECT) === 0) {\n\t\t\tdestroy_effect(effect);\n\t\t}\n\t\teffect = next;\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} [remove_dom]\n * @returns {void}\n */\nexport function destroy_effect(effect, remove_dom = true) {\n\tvar removed = false;\n\n\tif (\n\t\t(remove_dom || (effect.f & HEAD_EFFECT) !== 0) &&\n\t\teffect.nodes_start !== null &&\n\t\teffect.nodes_end !== null\n\t) {\n\t\tremove_effect_dom(effect.nodes_start, /** @type {TemplateNode} */ (effect.nodes_end));\n\t\tremoved = true;\n\t}\n\n\tdestroy_effect_children(effect, remove_dom && !removed);\n\tremove_reactions(effect, 0);\n\tset_signal_status(effect, DESTROYED);\n\n\tvar transitions = effect.transitions;\n\n\tif (transitions !== null) {\n\t\tfor (const transition of transitions) {\n\t\t\ttransition.stop();\n\t\t}\n\t}\n\n\texecute_effect_teardown(effect);\n\n\tvar parent = effect.parent;\n\n\t// If the parent doesn't have any children, then skip this work altogether\n\tif (parent !== null && parent.first !== null) {\n\t\tunlink_effect(effect);\n\t}\n\n\tif (DEV) {\n\t\teffect.component_function = null;\n\t}\n\n\t// `first` and `child` are nulled out in destroy_effect_children\n\t// we don't null out `parent` so that error propagation can work correctly\n\teffect.next =\n\t\teffect.prev =\n\t\teffect.teardown =\n\t\teffect.ctx =\n\t\teffect.deps =\n\t\teffect.fn =\n\t\teffect.nodes_start =\n\t\teffect.nodes_end =\n\t\t\tnull;\n}\n\n/**\n *\n * @param {TemplateNode | null} node\n * @param {TemplateNode} end\n */\nexport function remove_effect_dom(node, end) {\n\twhile (node !== null) {\n\t\t/** @type {TemplateNode | null} */\n\t\tvar next = node === end ? null : /** @type {TemplateNode} */ (get_next_sibling(node));\n\n\t\tnode.remove();\n\t\tnode = next;\n\t}\n}\n\n/**\n * Detach an effect from the effect tree, freeing up memory and\n * reducing the amount of work that happens on subsequent traversals\n * @param {Effect} effect\n */\nexport function unlink_effect(effect) {\n\tvar parent = effect.parent;\n\tvar prev = effect.prev;\n\tvar next = effect.next;\n\n\tif (prev !== null) prev.next = next;\n\tif (next !== null) next.prev = prev;\n\n\tif (parent !== null) {\n\t\tif (parent.first === effect) parent.first = next;\n\t\tif (parent.last === effect) parent.last = prev;\n\t}\n}\n\n/**\n * When a block effect is removed, we don't immediately destroy it or yank it\n * out of the DOM, because it might have transitions. Instead, we 'pause' it.\n * It stays around (in memory, and in the DOM) until outro transitions have\n * completed, and if the state change is reversed then we _resume_ it.\n * A paused effect does not update, and the DOM subtree becomes inert.\n * @param {Effect} effect\n * @param {() => void} [callback]\n */\nexport function pause_effect(effect, callback) {\n\t/** @type {TransitionManager[]} */\n\tvar transitions = [];\n\n\tpause_children(effect, transitions, true);\n\n\trun_out_transitions(transitions, () => {\n\t\tdestroy_effect(effect);\n\t\tif (callback) callback();\n\t});\n}\n\n/**\n * @param {TransitionManager[]} transitions\n * @param {() => void} fn\n */\nexport function run_out_transitions(transitions, fn) {\n\tvar remaining = transitions.length;\n\tif (remaining > 0) {\n\t\tvar check = () => --remaining || fn();\n\t\tfor (var transition of transitions) {\n\t\t\ttransition.out(check);\n\t\t}\n\t} else {\n\t\tfn();\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @param {TransitionManager[]} transitions\n * @param {boolean} local\n */\nexport function pause_children(effect, transitions, local) {\n\tif ((effect.f & INERT) !== 0) return;\n\teffect.f ^= INERT;\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransitions.push(transition);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call pause_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tpause_children(child, transitions, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n}\n\n/**\n * The opposite of `pause_effect`. We call this if (for example)\n * `x` becomes falsy then truthy: `{#if x}...{/if}`\n * @param {Effect} effect\n */\nexport function resume_effect(effect) {\n\tresume_children(effect, true);\n}\n\n/**\n * @param {Effect} effect\n * @param {boolean} local\n */\nfunction resume_children(effect, local) {\n\tif ((effect.f & INERT) === 0) return;\n\teffect.f ^= INERT;\n\n\t// If a dependency of this effect changed while it was paused,\n\t// schedule the effect to update. we don't use `check_dirtiness`\n\t// here because we don't want to eagerly recompute a derived like\n\t// `{#if foo}{foo.bar()}{/if}` if `foo` is now `undefined\n\tif ((effect.f & CLEAN) !== 0) {\n\t\tset_signal_status(effect, DIRTY);\n\t\tschedule_effect(effect);\n\t}\n\n\tvar child = effect.first;\n\n\twhile (child !== null) {\n\t\tvar sibling = child.next;\n\t\tvar transparent = (child.f & EFFECT_TRANSPARENT) !== 0 || (child.f & BRANCH_EFFECT) !== 0;\n\t\t// TODO we don't need to call resume_children recursively with a linked list in place\n\t\t// it's slightly more involved though as we have to account for `transparent` changing\n\t\t// through the tree.\n\t\tresume_children(child, transparent ? local : false);\n\t\tchild = sibling;\n\t}\n\n\tif (effect.transitions !== null) {\n\t\tfor (const transition of effect.transitions) {\n\t\t\tif (transition.is_global || local) {\n\t\t\t\ttransition.in();\n\t\t\t}\n\t\t}\n\t}\n}\n","import { run_all } from '../../shared/utils.js';\n\n// Fallback for when requestIdleCallback is not available\nconst request_idle_callback =\n\ttypeof requestIdleCallback === 'undefined'\n\t\t? (/** @type {() => void} */ cb) => setTimeout(cb, 1)\n\t\t: requestIdleCallback;\n\n/** @type {Array<() => void>} */\nlet micro_tasks = [];\n\n/** @type {Array<() => void>} */\nlet idle_tasks = [];\n\nfunction run_micro_tasks() {\n\tvar tasks = micro_tasks;\n\tmicro_tasks = [];\n\trun_all(tasks);\n}\n\nfunction run_idle_tasks() {\n\tvar tasks = idle_tasks;\n\tidle_tasks = [];\n\trun_all(tasks);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_micro_task(fn) {\n\tif (micro_tasks.length === 0) {\n\t\tqueueMicrotask(run_micro_tasks);\n\t}\n\n\tmicro_tasks.push(fn);\n}\n\n/**\n * @param {() => void} fn\n */\nexport function queue_idle_task(fn) {\n\tif (idle_tasks.length === 0) {\n\t\trequest_idle_callback(run_idle_tasks);\n\t}\n\n\tidle_tasks.push(fn);\n}\n\n/**\n * Synchronously run any queued tasks.\n */\nexport function flush_tasks() {\n\tif (micro_tasks.length > 0) {\n\t\trun_micro_tasks();\n\t}\n\n\tif (idle_tasks.length > 0) {\n\t\trun_idle_tasks();\n\t}\n}\n","/** @import { Effect } from '#client' */\nimport { DEV } from 'esm-env';\nimport { FILENAME } from '../../constants.js';\nimport { is_firefox } from './dom/operations.js';\nimport { BOUNDARY_EFFECT, EFFECT_RAN } from './constants.js';\nimport { define_property, get_descriptor } from '../shared/utils.js';\nimport { active_effect } from './runtime.js';\n\n/**\n * @param {unknown} error\n */\nexport function handle_error(error) {\n\tvar effect = /** @type {Effect} */ (active_effect);\n\n\tif (DEV && error instanceof Error) {\n\t\tadjust_error(error, effect);\n\t}\n\n\tif ((effect.f & EFFECT_RAN) === 0) {\n\t\t// if the error occurred while creating this subtree, we let it\n\t\t// bubble up until it hits a boundary that can handle it\n\t\tif ((effect.f & BOUNDARY_EFFECT) === 0) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// @ts-expect-error\n\t\teffect.fn(error);\n\t} else {\n\t\t// otherwise we bubble up the effect tree ourselves\n\t\tinvoke_error_boundary(error, effect);\n\t}\n}\n\n/**\n * @param {unknown} error\n * @param {Effect | null} effect\n */\nexport function invoke_error_boundary(error, effect) {\n\twhile (effect !== null) {\n\t\tif ((effect.f & BOUNDARY_EFFECT) !== 0) {\n\t\t\ttry {\n\t\t\t\t// @ts-expect-error\n\t\t\t\teffect.fn(error);\n\t\t\t\treturn;\n\t\t\t} catch {}\n\t\t}\n\n\t\teffect = effect.parent;\n\t}\n\n\tthrow error;\n}\n\n/** @type {WeakSet<Error>} */\nconst adjusted_errors = new WeakSet();\n\n/**\n * Add useful information to the error message/stack in development\n * @param {Error} error\n * @param {Effect} effect\n */\nfunction adjust_error(error, effect) {\n\tif (adjusted_errors.has(error)) return;\n\tadjusted_errors.add(error);\n\n\tconst message_descriptor = get_descriptor(error, 'message');\n\n\t// if the message was already changed and it's not configurable we can't change it\n\t// or it will throw a different error swallowing the original error\n\tif (message_descriptor && !message_descriptor.configurable) return;\n\n\tvar indent = is_firefox ? '  ' : '\\t';\n\tvar component_stack = `\\n${indent}in ${effect.fn?.name || '<unknown>'}`;\n\tvar context = effect.ctx;\n\n\twhile (context !== null) {\n\t\tcomponent_stack += `\\n${indent}in ${context.function?.[FILENAME].split('/').pop()}`;\n\t\tcontext = context.p;\n\t}\n\n\tdefine_property(error, 'message', {\n\t\tvalue: error.message + `\\n${component_stack}\\n`\n\t});\n\n\tif (error.stack) {\n\t\t// Filter out internal modules\n\t\tdefine_property(error, 'stack', {\n\t\t\tvalue: error.stack\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter((line) => !line.includes('svelte/src/internal'))\n\t\t\t\t.join('\\n')\n\t\t});\n\t}\n}\n","/** @import { Derived, Effect, Reaction, Signal, Source, Value } from '#client' */\nimport { DEV } from 'esm-env';\nimport { define_property, get_descriptors, get_prototype_of, index_of } from '../shared/utils.js';\nimport {\n\tdestroy_block_effect_children,\n\tdestroy_effect_children,\n\texecute_effect_teardown,\n\tunlink_effect\n} from './reactivity/effects.js';\nimport {\n\tEFFECT,\n\tDIRTY,\n\tMAYBE_DIRTY,\n\tCLEAN,\n\tDERIVED,\n\tUNOWNED,\n\tDESTROYED,\n\tINERT,\n\tBRANCH_EFFECT,\n\tSTATE_SYMBOL,\n\tBLOCK_EFFECT,\n\tROOT_EFFECT,\n\tLEGACY_DERIVED_PROP,\n\tDISCONNECTED,\n\tEFFECT_IS_UPDATING\n} from './constants.js';\nimport { flush_tasks } from './dom/task.js';\nimport { internal_set, old_values } from './reactivity/sources.js';\nimport { destroy_derived_effects, update_derived } from './reactivity/deriveds.js';\nimport * as e from './errors.js';\n\nimport { tracing_mode_flag } from '../flags/index.js';\nimport { tracing_expressions, get_stack } from './dev/tracing.js';\nimport {\n\tcomponent_context,\n\tdev_current_component_function,\n\tis_runes,\n\tset_component_context,\n\tset_dev_current_component_function\n} from './context.js';\nimport { handle_error, invoke_error_boundary } from './error-handling.js';\nimport { snapshot } from '../shared/clone.js';\n\nlet is_flushing = false;\n\n/** @type {Effect | null} */\nlet last_scheduled_effect = null;\n\nlet is_updating_effect = false;\n\nexport let is_destroying_effect = false;\n\n/** @param {boolean} value */\nexport function set_is_destroying_effect(value) {\n\tis_destroying_effect = value;\n}\n\n// Handle effect queues\n\n/** @type {Effect[]} */\nlet queued_root_effects = [];\n\n/** @type {Effect[]} Stack of effects, dev only */\nlet dev_effect_stack = [];\n// Handle signal reactivity tree dependencies and reactions\n\n/** @type {null | Reaction} */\nexport let active_reaction = null;\n\nexport let untracking = false;\n\n/** @param {null | Reaction} reaction */\nexport function set_active_reaction(reaction) {\n\tactive_reaction = reaction;\n}\n\n/** @type {null | Effect} */\nexport let active_effect = null;\n\n/** @param {null | Effect} effect */\nexport function set_active_effect(effect) {\n\tactive_effect = effect;\n}\n\n/**\n * When sources are created within a reaction, reading and writing\n * them should not cause a re-run\n * @type {null | Source[]}\n */\nexport let reaction_sources = null;\n\n/** @param {Value} value */\nexport function push_reaction_value(value) {\n\tif (active_reaction !== null && active_reaction.f & EFFECT_IS_UPDATING) {\n\t\tif (reaction_sources === null) {\n\t\t\treaction_sources = [value];\n\t\t} else {\n\t\t\treaction_sources.push(value);\n\t\t}\n\t}\n}\n\n/**\n * The dependencies of the reaction that is currently being executed. In many cases,\n * the dependencies are unchanged between runs, and so this will be `null` unless\n * and until a new dependency is accessed — we track this via `skipped_deps`\n * @type {null | Value[]}\n */\nlet new_deps = null;\n\nlet skipped_deps = 0;\n\n/**\n * Tracks writes that the effect it's executed in doesn't listen to yet,\n * so that the dependency can be added to the effect later on if it then reads it\n * @type {null | Source[]}\n */\nexport let untracked_writes = null;\n\n/** @param {null | Source[]} value */\nexport function set_untracked_writes(value) {\n\tuntracked_writes = value;\n}\n\n/**\n * @type {number} Used by sources and deriveds for handling updates.\n * Version starts from 1 so that unowned deriveds differentiate between a created effect and a run one for tracing\n **/\nlet write_version = 1;\n\n/** @type {number} Used to version each read of a source of derived to avoid duplicating depedencies inside a reaction */\nlet read_version = 0;\n\n// If we are working with a get() chain that has no active container,\n// to prevent memory leaks, we skip adding the reaction.\nexport let skip_reaction = false;\n// Handle collecting all signals which are read during a specific time frame\n/** @type {Set<Value> | null} */\nexport let captured_signals = null;\n\n/** @param {Set<Value> | null} value */\nexport function set_captured_signals(value) {\n\tcaptured_signals = value;\n}\n\nexport function increment_write_version() {\n\treturn ++write_version;\n}\n\n/**\n * Determines whether a derived or effect is dirty.\n * If it is MAYBE_DIRTY, will set the status to CLEAN\n * @param {Reaction} reaction\n * @returns {boolean}\n */\nexport function check_dirtiness(reaction) {\n\tvar flags = reaction.f;\n\n\tif ((flags & DIRTY) !== 0) {\n\t\treturn true;\n\t}\n\n\tif ((flags & MAYBE_DIRTY) !== 0) {\n\t\tvar dependencies = reaction.deps;\n\t\tvar is_unowned = (flags & UNOWNED) !== 0;\n\n\t\tif (dependencies !== null) {\n\t\t\tvar i;\n\t\t\tvar dependency;\n\t\t\tvar is_disconnected = (flags & DISCONNECTED) !== 0;\n\t\t\tvar is_unowned_connected = is_unowned && active_effect !== null && !skip_reaction;\n\t\t\tvar length = dependencies.length;\n\n\t\t\t// If we are working with a disconnected or an unowned signal that is now connected (due to an active effect)\n\t\t\t// then we need to re-connect the reaction to the dependency\n\t\t\tif (is_disconnected || is_unowned_connected) {\n\t\t\t\tvar derived = /** @type {Derived} */ (reaction);\n\t\t\t\tvar parent = derived.parent;\n\n\t\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\t\t// We always re-add all reactions (even duplicates) if the derived was\n\t\t\t\t\t// previously disconnected, however we don't if it was unowned as we\n\t\t\t\t\t// de-duplicate dependencies in that case\n\t\t\t\t\tif (is_disconnected || !dependency?.reactions?.includes(derived)) {\n\t\t\t\t\t\t(dependency.reactions ??= []).push(derived);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (is_disconnected) {\n\t\t\t\t\tderived.f ^= DISCONNECTED;\n\t\t\t\t}\n\t\t\t\t// If the unowned derived is now fully connected to the graph again (it's unowned and reconnected, has a parent\n\t\t\t\t// and the parent is not unowned), then we can mark it as connected again, removing the need for the unowned\n\t\t\t\t// flag\n\t\t\t\tif (is_unowned_connected && parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t\t\tderived.f ^= UNOWNED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0; i < length; i++) {\n\t\t\t\tdependency = dependencies[i];\n\n\t\t\t\tif (check_dirtiness(/** @type {Derived} */ (dependency))) {\n\t\t\t\t\tupdate_derived(/** @type {Derived} */ (dependency));\n\t\t\t\t}\n\n\t\t\t\tif (dependency.wv > reaction.wv) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unowned signals should never be marked as clean unless they\n\t\t// are used within an active_effect without skip_reaction\n\t\tif (!is_unowned || (active_effect !== null && !skip_reaction)) {\n\t\t\tset_signal_status(reaction, CLEAN);\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * @param {Value} signal\n * @param {Effect} effect\n * @param {boolean} [root]\n */\nfunction schedule_possible_effect_self_invalidation(signal, effect, root = true) {\n\tvar reactions = signal.reactions;\n\tif (reactions === null) return;\n\n\tfor (var i = 0; i < reactions.length; i++) {\n\t\tvar reaction = reactions[i];\n\n\t\tif (reaction_sources?.includes(signal)) continue;\n\n\t\tif ((reaction.f & DERIVED) !== 0) {\n\t\t\tschedule_possible_effect_self_invalidation(/** @type {Derived} */ (reaction), effect, false);\n\t\t} else if (effect === reaction) {\n\t\t\tif (root) {\n\t\t\t\tset_signal_status(reaction, DIRTY);\n\t\t\t} else if ((reaction.f & CLEAN) !== 0) {\n\t\t\t\tset_signal_status(reaction, MAYBE_DIRTY);\n\t\t\t}\n\t\t\tschedule_effect(/** @type {Effect} */ (reaction));\n\t\t}\n\t}\n}\n\n/** @param {Reaction} reaction */\nexport function update_reaction(reaction) {\n\tvar previous_deps = new_deps;\n\tvar previous_skipped_deps = skipped_deps;\n\tvar previous_untracked_writes = untracked_writes;\n\tvar previous_reaction = active_reaction;\n\tvar previous_skip_reaction = skip_reaction;\n\tvar previous_reaction_sources = reaction_sources;\n\tvar previous_component_context = component_context;\n\tvar previous_untracking = untracking;\n\n\tvar flags = reaction.f;\n\n\tnew_deps = /** @type {null | Value[]} */ (null);\n\tskipped_deps = 0;\n\tuntracked_writes = null;\n\tskip_reaction =\n\t\t(flags & UNOWNED) !== 0 && (untracking || !is_updating_effect || active_reaction === null);\n\tactive_reaction = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) === 0 ? reaction : null;\n\n\treaction_sources = null;\n\tset_component_context(reaction.ctx);\n\tuntracking = false;\n\tread_version++;\n\n\treaction.f |= EFFECT_IS_UPDATING;\n\n\ttry {\n\t\tvar result = /** @type {Function} */ (0, reaction.fn)();\n\t\tvar deps = reaction.deps;\n\n\t\tif (new_deps !== null) {\n\t\t\tvar i;\n\n\t\t\tremove_reactions(reaction, skipped_deps);\n\n\t\t\tif (deps !== null && skipped_deps > 0) {\n\t\t\t\tdeps.length = skipped_deps + new_deps.length;\n\t\t\t\tfor (i = 0; i < new_deps.length; i++) {\n\t\t\t\t\tdeps[skipped_deps + i] = new_deps[i];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treaction.deps = deps = new_deps;\n\t\t\t}\n\n\t\t\tif (!skip_reaction) {\n\t\t\t\tfor (i = skipped_deps; i < deps.length; i++) {\n\t\t\t\t\t(deps[i].reactions ??= []).push(reaction);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (deps !== null && skipped_deps < deps.length) {\n\t\t\tremove_reactions(reaction, skipped_deps);\n\t\t\tdeps.length = skipped_deps;\n\t\t}\n\n\t\t// If we're inside an effect and we have untracked writes, then we need to\n\t\t// ensure that if any of those untracked writes result in re-invalidation\n\t\t// of the current effect, then that happens accordingly\n\t\tif (\n\t\t\tis_runes() &&\n\t\t\tuntracked_writes !== null &&\n\t\t\t!untracking &&\n\t\t\tdeps !== null &&\n\t\t\t(reaction.f & (DERIVED | MAYBE_DIRTY | DIRTY)) === 0\n\t\t) {\n\t\t\tfor (i = 0; i < /** @type {Source[]} */ (untracked_writes).length; i++) {\n\t\t\t\tschedule_possible_effect_self_invalidation(\n\t\t\t\t\tuntracked_writes[i],\n\t\t\t\t\t/** @type {Effect} */ (reaction)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// If we are returning to an previous reaction then\n\t\t// we need to increment the read version to ensure that\n\t\t// any dependencies in this reaction aren't marked with\n\t\t// the same version\n\t\tif (previous_reaction !== null && previous_reaction !== reaction) {\n\t\t\tread_version++;\n\n\t\t\tif (untracked_writes !== null) {\n\t\t\t\tif (previous_untracked_writes === null) {\n\t\t\t\t\tprevious_untracked_writes = untracked_writes;\n\t\t\t\t} else {\n\t\t\t\t\tprevious_untracked_writes.push(.../** @type {Source[]} */ (untracked_writes));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t} catch (error) {\n\t\thandle_error(error);\n\t} finally {\n\t\tnew_deps = previous_deps;\n\t\tskipped_deps = previous_skipped_deps;\n\t\tuntracked_writes = previous_untracked_writes;\n\t\tactive_reaction = previous_reaction;\n\t\tskip_reaction = previous_skip_reaction;\n\t\treaction_sources = previous_reaction_sources;\n\t\tset_component_context(previous_component_context);\n\t\tuntracking = previous_untracking;\n\n\t\treaction.f ^= EFFECT_IS_UPDATING;\n\t}\n}\n\n/**\n * @template V\n * @param {Reaction} signal\n * @param {Value<V>} dependency\n * @returns {void}\n */\nfunction remove_reaction(signal, dependency) {\n\tlet reactions = dependency.reactions;\n\tif (reactions !== null) {\n\t\tvar index = index_of.call(reactions, signal);\n\t\tif (index !== -1) {\n\t\t\tvar new_length = reactions.length - 1;\n\t\t\tif (new_length === 0) {\n\t\t\t\treactions = dependency.reactions = null;\n\t\t\t} else {\n\t\t\t\t// Swap with last element and then remove.\n\t\t\t\treactions[index] = reactions[new_length];\n\t\t\t\treactions.pop();\n\t\t\t}\n\t\t}\n\t}\n\t// If the derived has no reactions, then we can disconnect it from the graph,\n\t// allowing it to either reconnect in the future, or be GC'd by the VM.\n\tif (\n\t\treactions === null &&\n\t\t(dependency.f & DERIVED) !== 0 &&\n\t\t// Destroying a child effect while updating a parent effect can cause a dependency to appear\n\t\t// to be unused, when in fact it is used by the currently-updating parent. Checking `new_deps`\n\t\t// allows us to skip the expensive work of disconnecting and immediately reconnecting it\n\t\t(new_deps === null || !new_deps.includes(dependency))\n\t) {\n\t\tset_signal_status(dependency, MAYBE_DIRTY);\n\t\t// If we are working with a derived that is owned by an effect, then mark it as being\n\t\t// disconnected.\n\t\tif ((dependency.f & (UNOWNED | DISCONNECTED)) === 0) {\n\t\t\tdependency.f ^= DISCONNECTED;\n\t\t}\n\t\t// Disconnect any reactions owned by this reaction\n\t\tdestroy_derived_effects(/** @type {Derived} **/ (dependency));\n\t\tremove_reactions(/** @type {Derived} **/ (dependency), 0);\n\t}\n}\n\n/**\n * @param {Reaction} signal\n * @param {number} start_index\n * @returns {void}\n */\nexport function remove_reactions(signal, start_index) {\n\tvar dependencies = signal.deps;\n\tif (dependencies === null) return;\n\n\tfor (var i = start_index; i < dependencies.length; i++) {\n\t\tremove_reaction(signal, dependencies[i]);\n\t}\n}\n\n/**\n * @param {Effect} effect\n * @returns {void}\n */\nexport function update_effect(effect) {\n\tvar flags = effect.f;\n\n\tif ((flags & DESTROYED) !== 0) {\n\t\treturn;\n\t}\n\n\tset_signal_status(effect, CLEAN);\n\n\tvar previous_effect = active_effect;\n\tvar was_updating_effect = is_updating_effect;\n\n\tactive_effect = effect;\n\tis_updating_effect = true;\n\n\tif (DEV) {\n\t\tvar previous_component_fn = dev_current_component_function;\n\t\tset_dev_current_component_function(effect.component_function);\n\t}\n\n\ttry {\n\t\tif ((flags & BLOCK_EFFECT) !== 0) {\n\t\t\tdestroy_block_effect_children(effect);\n\t\t} else {\n\t\t\tdestroy_effect_children(effect);\n\t\t}\n\n\t\texecute_effect_teardown(effect);\n\t\tvar teardown = update_reaction(effect);\n\t\teffect.teardown = typeof teardown === 'function' ? teardown : null;\n\t\teffect.wv = write_version;\n\n\t\t// In DEV, increment versions of any sources that were written to during the effect,\n\t\t// so that they are correctly marked as dirty when the effect re-runs\n\t\tif (DEV && tracing_mode_flag && (effect.f & DIRTY) !== 0 && effect.deps !== null) {\n\t\t\tfor (var dep of effect.deps) {\n\t\t\t\tif (dep.set_during_effect) {\n\t\t\t\t\tdep.wv = increment_write_version();\n\t\t\t\t\tdep.set_during_effect = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (DEV) {\n\t\t\tdev_effect_stack.push(effect);\n\t\t}\n\t} finally {\n\t\tis_updating_effect = was_updating_effect;\n\t\tactive_effect = previous_effect;\n\n\t\tif (DEV) {\n\t\t\tset_dev_current_component_function(previous_component_fn);\n\t\t}\n\t}\n}\n\nfunction log_effect_stack() {\n\t// eslint-disable-next-line no-console\n\tconsole.error(\n\t\t'Last ten effects were: ',\n\t\tdev_effect_stack.slice(-10).map((d) => d.fn)\n\t);\n\tdev_effect_stack = [];\n}\n\nfunction infinite_loop_guard() {\n\ttry {\n\t\te.effect_update_depth_exceeded();\n\t} catch (error) {\n\t\tif (DEV) {\n\t\t\t// stack is garbage, ignore. Instead add a console.error message.\n\t\t\tdefine_property(error, 'stack', {\n\t\t\t\tvalue: ''\n\t\t\t});\n\t\t}\n\t\t// Try and handle the error so it can be caught at a boundary, that's\n\t\t// if there's an effect available from when it was last scheduled\n\t\tif (last_scheduled_effect !== null) {\n\t\t\tif (DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tinvoke_error_boundary(error, last_scheduled_effect);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Only log the effect stack if the error is re-thrown\n\t\t\t\t\tlog_effect_stack();\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinvoke_error_boundary(error, last_scheduled_effect);\n\t\t\t}\n\t\t} else {\n\t\t\tif (DEV) {\n\t\t\t\tlog_effect_stack();\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nfunction flush_queued_root_effects() {\n\tvar was_updating_effect = is_updating_effect;\n\n\ttry {\n\t\tvar flush_count = 0;\n\t\tis_updating_effect = true;\n\n\t\twhile (queued_root_effects.length > 0) {\n\t\t\tif (flush_count++ > 1000) {\n\t\t\t\tinfinite_loop_guard();\n\t\t\t}\n\n\t\t\tvar root_effects = queued_root_effects;\n\t\t\tvar length = root_effects.length;\n\n\t\t\tqueued_root_effects = [];\n\n\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\tvar collected_effects = process_effects(root_effects[i]);\n\t\t\t\tflush_queued_effects(collected_effects);\n\t\t\t}\n\t\t\told_values.clear();\n\t\t}\n\t} finally {\n\t\tis_flushing = false;\n\t\tis_updating_effect = was_updating_effect;\n\n\t\tlast_scheduled_effect = null;\n\t\tif (DEV) {\n\t\t\tdev_effect_stack = [];\n\t\t}\n\t}\n}\n\n/**\n * @param {Array<Effect>} effects\n * @returns {void}\n */\nfunction flush_queued_effects(effects) {\n\tvar length = effects.length;\n\tif (length === 0) return;\n\n\tfor (var i = 0; i < length; i++) {\n\t\tvar effect = effects[i];\n\n\t\tif ((effect.f & (DESTROYED | INERT)) === 0) {\n\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\tupdate_effect(effect);\n\n\t\t\t\t// Effects with no dependencies or teardown do not get added to the effect tree.\n\t\t\t\t// Deferred effects (e.g. `$effect(...)`) _are_ added to the tree because we\n\t\t\t\t// don't know if we need to keep them until they are executed. Doing the check\n\t\t\t\t// here (rather than in `update_effect`) allows us to skip the work for\n\t\t\t\t// immediate effects.\n\t\t\t\tif (effect.deps === null && effect.first === null && effect.nodes_start === null) {\n\t\t\t\t\tif (effect.teardown === null) {\n\t\t\t\t\t\t// remove this effect from the graph\n\t\t\t\t\t\tunlink_effect(effect);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep the effect in the graph, but free up some memory\n\t\t\t\t\t\teffect.fn = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {Effect} signal\n * @returns {void}\n */\nexport function schedule_effect(signal) {\n\tif (!is_flushing) {\n\t\tis_flushing = true;\n\t\tqueueMicrotask(flush_queued_root_effects);\n\t}\n\n\tvar effect = (last_scheduled_effect = signal);\n\n\twhile (effect.parent !== null) {\n\t\teffect = effect.parent;\n\t\tvar flags = effect.f;\n\n\t\tif ((flags & (ROOT_EFFECT | BRANCH_EFFECT)) !== 0) {\n\t\t\tif ((flags & CLEAN) === 0) return;\n\t\t\teffect.f ^= CLEAN;\n\t\t}\n\t}\n\n\tqueued_root_effects.push(effect);\n}\n\n/**\n *\n * This function both runs render effects and collects user effects in topological order\n * from the starting effect passed in. Effects will be collected when they match the filtered\n * bitwise flag passed in only. The collected effects array will be populated with all the user\n * effects to be flushed.\n *\n * @param {Effect} root\n * @returns {Effect[]}\n */\nfunction process_effects(root) {\n\t/** @type {Effect[]} */\n\tvar effects = [];\n\n\t/** @type {Effect | null} */\n\tvar effect = root;\n\n\twhile (effect !== null) {\n\t\tvar flags = effect.f;\n\t\tvar is_branch = (flags & (BRANCH_EFFECT | ROOT_EFFECT)) !== 0;\n\t\tvar is_skippable_branch = is_branch && (flags & CLEAN) !== 0;\n\n\t\tif (!is_skippable_branch && (flags & INERT) === 0) {\n\t\t\tif ((flags & EFFECT) !== 0) {\n\t\t\t\teffects.push(effect);\n\t\t\t} else if (is_branch) {\n\t\t\t\teffect.f ^= CLEAN;\n\t\t\t} else {\n\t\t\t\tif (check_dirtiness(effect)) {\n\t\t\t\t\tupdate_effect(effect);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/** @type {Effect | null} */\n\t\t\tvar child = effect.first;\n\n\t\t\tif (child !== null) {\n\t\t\t\teffect = child;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tvar parent = effect.parent;\n\t\teffect = effect.next;\n\n\t\twhile (effect === null && parent !== null) {\n\t\t\teffect = parent.next;\n\t\t\tparent = parent.parent;\n\t\t}\n\t}\n\n\treturn effects;\n}\n\n/**\n * Synchronously flush any pending updates.\n * Returns void if no callback is provided, otherwise returns the result of calling the callback.\n * @template [T=void]\n * @param {(() => T) | undefined} [fn]\n * @returns {T}\n */\nexport function flushSync(fn) {\n\tvar result;\n\n\tif (fn) {\n\t\tis_flushing = true;\n\t\tflush_queued_root_effects();\n\n\t\tis_flushing = true;\n\t\tresult = fn();\n\t}\n\n\twhile (true) {\n\t\tflush_tasks();\n\n\t\tif (queued_root_effects.length === 0) {\n\t\t\t// this would be reset in `flush_queued_root_effects` but since we are early returning here,\n\t\t\t// we need to reset it here as well in case the first time there's 0 queued root effects\n\t\t\tis_flushing = false;\n\t\t\tlast_scheduled_effect = null;\n\t\t\tif (DEV) {\n\t\t\t\tdev_effect_stack = [];\n\t\t\t}\n\t\t\treturn /** @type {T} */ (result);\n\t\t}\n\n\t\tis_flushing = true;\n\t\tflush_queued_root_effects();\n\t}\n}\n\n/**\n * Returns a promise that resolves once any pending state changes have been applied.\n * @returns {Promise<void>}\n */\nexport async function tick() {\n\tawait Promise.resolve();\n\t// By calling flushSync we guarantee that any pending state changes are applied after one tick.\n\t// TODO look into whether we can make flushing subsequent updates synchronously in the future.\n\tflushSync();\n}\n\n/**\n * @template V\n * @param {Value<V>} signal\n * @returns {V}\n */\nexport function get(signal) {\n\tvar flags = signal.f;\n\tvar is_derived = (flags & DERIVED) !== 0;\n\n\tif (captured_signals !== null) {\n\t\tcaptured_signals.add(signal);\n\t}\n\n\t// Register the dependency on the current reaction signal.\n\tif (active_reaction !== null && !untracking) {\n\t\tif (!reaction_sources?.includes(signal)) {\n\t\t\tvar deps = active_reaction.deps;\n\t\t\tif (signal.rv < read_version) {\n\t\t\t\tsignal.rv = read_version;\n\t\t\t\t// If the signal is accessing the same dependencies in the same\n\t\t\t\t// order as it did last time, increment `skipped_deps`\n\t\t\t\t// rather than updating `new_deps`, which creates GC cost\n\t\t\t\tif (new_deps === null && deps !== null && deps[skipped_deps] === signal) {\n\t\t\t\t\tskipped_deps++;\n\t\t\t\t} else if (new_deps === null) {\n\t\t\t\t\tnew_deps = [signal];\n\t\t\t\t} else if (!skip_reaction || !new_deps.includes(signal)) {\n\t\t\t\t\t// Normally we can push duplicated dependencies to `new_deps`, but if we're inside\n\t\t\t\t\t// an unowned derived because skip_reaction is true, then we need to ensure that\n\t\t\t\t\t// we don't have duplicates\n\t\t\t\t\tnew_deps.push(signal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (\n\t\tis_derived &&\n\t\t/** @type {Derived} */ (signal).deps === null &&\n\t\t/** @type {Derived} */ (signal).effects === null\n\t) {\n\t\tvar derived = /** @type {Derived} */ (signal);\n\t\tvar parent = derived.parent;\n\n\t\tif (parent !== null && (parent.f & UNOWNED) === 0) {\n\t\t\t// If the derived is owned by another derived then mark it as unowned\n\t\t\t// as the derived value might have been referenced in a different context\n\t\t\t// since and thus its parent might not be its true owner anymore\n\t\t\tderived.f ^= UNOWNED;\n\t\t}\n\t}\n\n\tif (is_derived) {\n\t\tderived = /** @type {Derived} */ (signal);\n\n\t\tif (check_dirtiness(derived)) {\n\t\t\tupdate_derived(derived);\n\t\t}\n\t}\n\n\tif (\n\t\tDEV &&\n\t\ttracing_mode_flag &&\n\t\t!untracking &&\n\t\ttracing_expressions !== null &&\n\t\tactive_reaction !== null &&\n\t\ttracing_expressions.reaction === active_reaction\n\t) {\n\t\t// Used when mapping state between special blocks like `each`\n\t\tif (signal.trace) {\n\t\t\tsignal.trace();\n\t\t} else {\n\t\t\tvar trace = get_stack('TracedAt');\n\n\t\t\tif (trace) {\n\t\t\t\tvar entry = tracing_expressions.entries.get(signal);\n\n\t\t\t\tif (entry === undefined) {\n\t\t\t\t\tentry = { traces: [] };\n\t\t\t\t\ttracing_expressions.entries.set(signal, entry);\n\t\t\t\t}\n\n\t\t\t\tvar last = entry.traces[entry.traces.length - 1];\n\n\t\t\t\t// traces can be duplicated, e.g. by `snapshot` invoking both\n\t\t\t\t// both `getOwnPropertyDescriptor` and `get` traps at once\n\t\t\t\tif (trace.stack !== last?.stack) {\n\t\t\t\t\tentry.traces.push(trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (is_destroying_effect && old_values.has(signal)) {\n\t\treturn old_values.get(signal);\n\t}\n\n\treturn signal.v;\n}\n\n/**\n * Like `get`, but checks for `undefined`. Used for `var` declarations because they can be accessed before being declared\n * @template V\n * @param {Value<V> | undefined} signal\n * @returns {V | undefined}\n */\nexport function safe_get(signal) {\n\treturn signal && get(signal);\n}\n\n/**\n * Capture an array of all the signals that are read when `fn` is called\n * @template T\n * @param {() => T} fn\n */\nfunction capture_signals(fn) {\n\tvar previous_captured_signals = captured_signals;\n\tcaptured_signals = new Set();\n\n\tvar captured = captured_signals;\n\tvar signal;\n\n\ttry {\n\t\tuntrack(fn);\n\t\tif (previous_captured_signals !== null) {\n\t\t\tfor (signal of captured_signals) {\n\t\t\t\tprevious_captured_signals.add(signal);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tcaptured_signals = previous_captured_signals;\n\t}\n\n\treturn captured;\n}\n\n/**\n * Invokes a function and captures all signals that are read during the invocation,\n * then invalidates them.\n * @param {() => any} fn\n */\nexport function invalidate_inner_signals(fn) {\n\tvar captured = capture_signals(() => untrack(fn));\n\n\tfor (var signal of captured) {\n\t\t// Go one level up because derived signals created as part of props in legacy mode\n\t\tif ((signal.f & LEGACY_DERIVED_PROP) !== 0) {\n\t\t\tfor (const dep of /** @type {Derived} */ (signal).deps || []) {\n\t\t\t\tif ((dep.f & DERIVED) === 0) {\n\t\t\t\t\t// Use internal_set instead of set here and below to avoid mutation validation\n\t\t\t\t\tinternal_set(dep, dep.v);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tinternal_set(signal, signal.v);\n\t\t}\n\t}\n}\n\n/**\n * When used inside a [`$derived`](https://svelte.dev/docs/svelte/$derived) or [`$effect`](https://svelte.dev/docs/svelte/$effect),\n * any state read inside `fn` will not be treated as a dependency.\n *\n * ```ts\n * $effect(() => {\n *   // this will run when `data` changes, but not when `time` changes\n *   save(data, {\n *     timestamp: untrack(() => time)\n *   });\n * });\n * ```\n * @template T\n * @param {() => T} fn\n * @returns {T}\n */\nexport function untrack(fn) {\n\tvar previous_untracking = untracking;\n\ttry {\n\t\tuntracking = true;\n\t\treturn fn();\n\t} finally {\n\t\tuntracking = previous_untracking;\n\t}\n}\n\nconst STATUS_MASK = ~(DIRTY | MAYBE_DIRTY | CLEAN);\n\n/**\n * @param {Signal} signal\n * @param {number} status\n * @returns {void}\n */\nexport function set_signal_status(signal, status) {\n\tsignal.f = (signal.f & STATUS_MASK) | status;\n}\n\n/**\n * @param {Record<string, unknown>} obj\n * @param {string[]} keys\n * @returns {Record<string, unknown>}\n */\nexport function exclude_from_object(obj, keys) {\n\t/** @type {Record<string, unknown>} */\n\tvar result = {};\n\n\tfor (var key in obj) {\n\t\tif (!keys.includes(key)) {\n\t\t\tresult[key] = obj[key];\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Possibly traverse an object and read all its properties so that they're all reactive in case this is `$state`.\n * Does only check first level of an object for performance reasons (heuristic should be good for 99% of all cases).\n * @param {any} value\n * @returns {void}\n */\nexport function deep_read_state(value) {\n\tif (typeof value !== 'object' || !value || value instanceof EventTarget) {\n\t\treturn;\n\t}\n\n\tif (STATE_SYMBOL in value) {\n\t\tdeep_read(value);\n\t} else if (!Array.isArray(value)) {\n\t\tfor (let key in value) {\n\t\t\tconst prop = value[key];\n\t\t\tif (typeof prop === 'object' && prop && STATE_SYMBOL in prop) {\n\t\t\t\tdeep_read(prop);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Deeply traverse an object and read all its properties\n * so that they're all reactive in case this is `$state`\n * @param {any} value\n * @param {Set<any>} visited\n * @returns {void}\n */\nexport function deep_read(value, visited = new Set()) {\n\tif (\n\t\ttypeof value === 'object' &&\n\t\tvalue !== null &&\n\t\t// We don't want to traverse DOM elements\n\t\t!(value instanceof EventTarget) &&\n\t\t!visited.has(value)\n\t) {\n\t\tvisited.add(value);\n\t\t// When working with a possible SvelteDate, this\n\t\t// will ensure we capture changes to it.\n\t\tif (value instanceof Date) {\n\t\t\tvalue.getTime();\n\t\t}\n\t\tfor (let key in value) {\n\t\t\ttry {\n\t\t\t\tdeep_read(value[key], visited);\n\t\t\t} catch (e) {\n\t\t\t\t// continue\n\t\t\t}\n\t\t}\n\t\tconst proto = get_prototype_of(value);\n\t\tif (\n\t\t\tproto !== Object.prototype &&\n\t\t\tproto !== Array.prototype &&\n\t\t\tproto !== Map.prototype &&\n\t\t\tproto !== Set.prototype &&\n\t\t\tproto !== Date.prototype\n\t\t) {\n\t\t\tconst descriptors = get_descriptors(proto);\n\t\t\tfor (let key in descriptors) {\n\t\t\t\tconst get = descriptors[key].get;\n\t\t\t\tif (get) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tget.call(value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// continue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["is_array","Array","isArray","index_of","prototype","indexOf","array_from","from","define_property","Object","defineProperty","get_descriptor","getOwnPropertyDescriptor","get_descriptors","getOwnPropertyDescriptors","object_prototype","array_prototype","get_prototype_of","getPrototypeOf","is_extensible","isExtensible","noop","__name","run","fn","run_all","arr","i","length","BRANCH_EFFECT","ROOT_EFFECT","UNOWNED","DISCONNECTED","CLEAN","DIRTY","MAYBE_DIRTY","INERT","DESTROYED","EFFECT_TRANSPARENT","LEGACY_DERIVED_PROP","HEAD_EFFECT","EFFECT_HAS_DERIVED","EFFECT_IS_UPDATING","STATE_SYMBOL","Symbol","LEGACY_PROPS","LOADING_ATTR_SYMBOL","equals","value","this","v","safe_not_equal","a","b","safe_equals","effect_in_teardown","rune","Error","effect_in_unowned_derived","effect_orphan","effect_update_depth_exceeded","hydration_failed","props_invalid_value","key","state_descriptors_fixed","state_prototype_fixed","state_unsafe_mutation","PROPS_IS_IMMUTABLE","PROPS_IS_RUNES","PROPS_IS_UPDATED","PROPS_IS_BINDABLE","PROPS_IS_LAZY_INITIAL","TEMPLATE_FRAGMENT","TEMPLATE_USE_IMPORT_NODE","HYDRATION_START","HYDRATION_START_ELSE","HYDRATION_END","HYDRATION_ERROR","UNINITIALIZED","NAMESPACE_HTML","component_context","set_component_context","context","push","props","runes","ctx","p","c","d","e","m","s","x","l","legacy_mode_flag","u","r1","r2","source","teardown","pop","component","context_stack_item","component_effects","previous_effect","active_effect","previous_reaction","active_reaction","component_effect","set_active_effect","effect","set_active_reaction","reaction","is_runes","proxy","sources","Map","is_proxied_array","version","with_parent","result","set","Proxy","_","prop","descriptor","configurable","enumerable","writable","get","deleteProperty","target","update_version","ls","n","Number","isInteger","receiver","exists","_a","Reflect","has","other_s","state","call","ownKeys","own_keys","filter","setPrototypeOf","signal","derived","flags","DERIVED","parent_derived","f","deps","effects","reactions","rv","wv","parent","user_derived","push_reaction_value","derived_safe_equal","destroy_derived_effects","destroy_effect","get_derived_parent_effect","execute_derived","prev_active_effect","update_reaction","update_derived","increment_write_version","is_destroying_effect","set_signal_status","skip_reaction","old_values","stack","mutable_source","initial_value","immutable","trackable","should_proxy","untracking","reaction_sources","includes","internal_set","old_value","mark_reactions","untracked_writes","set_untracked_writes","status","schedule_effect","hydration_mismatch","location","console","warn","hydrate_node","hydrating","set_hydrating","set_hydrate_node","node","hydrate_next","reset","get_next_sibling","next","count","remove_nodes","depth","nodeType","data","remove","read_hydration_instruction","$window","$document","is_firefox","first_child_getter","next_sibling_getter","init_operations","window","document","test","navigator","userAgent","element_prototype","Element","node_prototype","Node","text_prototype","Text","__click","__className","__attributes","__style","__e","__t","create_text","createTextNode","get_first_child","child","is_text","appendChild","text","before","first_child","fragment","first","Comment","sibling","next_sibling","last_sibling","type","after","clear_text_content","textContent","validate_effect","push_effect","parent_effect","parent_last","last","prev","create_effect","sync","nodes_start","nodes_end","transitions","update_effect","user_effect","user_pre_effect","render_effect","component_root","options","Promise","fulfil","outro","pause_effect","legacy_pre_effect","token","ran","untrack","legacy_pre_effect_reset","check_dirtiness","template_effect","thunks","deriveds","map","block","RENDER_EFFECT","branch","execute_effect_teardown","previously_destroying_effect","set_is_destroying_effect","destroy_effect_children","remove_dom","destroy_block_effect_children","removed","remove_effect_dom","remove_reactions","transition","stop","unlink_effect","end","callback","run_out_transitions","remaining","check","out","pause_children","local","is_global","resume_effect","resume_children","in","request_idle_callback","requestIdleCallback","cb","setTimeout","micro_tasks","idle_tasks","run_micro_tasks","tasks","run_idle_tasks","queue_micro_task","queueMicrotask","queue_idle_task","flush_tasks","handle_error","error","invoke_error_boundary","is_flushing","last_scheduled_effect","is_updating_effect","queued_root_effects","new_deps","skipped_deps","write_version","read_version","dependencies","is_unowned","dependency","is_disconnected","is_unowned_connected","schedule_possible_effect_self_invalidation","root","previous_deps","previous_skipped_deps","previous_untracked_writes","previous_skip_reaction","previous_reaction_sources","previous_component_context","previous_untracking","remove_reaction","index","new_length","start_index","was_updating_effect","infinite_loop_guard","flush_queued_root_effects","flush_count","root_effects","flush_queued_effects","process_effects","clear","is_branch","flushSync","async","tick","resolve","is_derived","safe_get","STATUS_MASK","deep_read_state","EventTarget","deep_read","visited","Set","add","Date","getTime","proto","descriptors"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}