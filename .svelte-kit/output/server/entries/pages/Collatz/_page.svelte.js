import{a as e,e as n}from"../../../chunks/attributes.js";function _page(s){var t;s.out+=`<h1 class="svelte-901fe7">The Collatz Conjecture</h1> <pre class="svelte-901fe7">For any positive integer n, the Collatz sequence is defined as follows:\n\n    If n is even:\n        Divide it by 2.\n    If n is odd:\n        Multiply it by 3 and add 1.\n\n    Repeat the process with the new value of n.\n\nThe conjecture states that no matter what positive integer you start with, the sequence will always eventually reach 1.</pre> <p>For example, consider n = 6:</p> <pre class="svelte-901fe7">    6 is even,  6÷2=3\n    3 is odd,   3×3+1=10\n    10 is even, 10÷2=5\n    5 is odd,   5×3+1=16.\n    16 is even, 16÷2=8.\n    8 is even,  8÷2=4.\n    4 is even,  4÷2=2.\n    2 is even,  2÷2=1.</pre> <br/> <div>*******************************************************</div> <div>*******************************************************</div> <p>Enter an integer greater than 1 below to see how many steps it takes to get to the the number "1". The arrow keys work. For example, if you enter 32, you get 5; press the "down" arrow on your keyboard, or the "down" arrow on the input box (below), and see that it takes 106 steps for 31 to get to 1.</p> <input type="number"${e("value",t)} class="svelte-901fe7"/> <h3>The selected number is ${n(t)}</h3> <h3>${n("")}</h3> <div>*******************************************************</div> <div>*******************************************************</div> <p>Here's the code that generates the Collatz sequence on this page:</p> <pre class="svelte-901fe7">  var log = console.log;\n  var dF3x = () => {};\n\n  function M(x) {\n    return function go(func) {\n      if (func === dF3x) return x;\n      else x = func(x);\n      return go;\n    };\n  }\n\nvar n;\nvar m;\n\nvar collatz = function collatz (n) {\n    m = M([n, 0]);\n    m(f);\n}\nvar out = "";\n\nfunction f (d) {\n      if (d[1] === 0) log("testing the number", d[0]);\n      d[1] = d[1] += 1;\n      if (d[0] % 2 === 0) d = [d[0]/2, d[1]]\n      else if (d[0] % 2 !== 0) d = [d[0]*3 + 1, d[1]]\n      if (d[0] !== 1) f(d)\n      else {\n          d[1] = d[1];\n          out = "The number of steps was " + d[1];\n      }\n}\n\nfunction getInput (event) {\n    n = event.target.value;\n}</pre> <p>Here are some results:</p> <pre class="svelte-901fe7">testing the number 10\nThe number of steps is 6\n\ntesting the number 100\nThe number of steps is 25\n\ntesting the number 1000\nThe number of steps is 111\n\ntesting the number 10000\nThe number of steps is 29\n\ntesting the number 100000\nThe number of steps is 128\n\ntesting the number 1000000\nThe number of steps is 152\n\ntesting the number 10000000\nThe number of steps is 145\n\ntesting the number 100000000\nThe number of steps is 107\n\ntesting the number 1000000000\nThe number of steps is 100\n\ntesting the number 10000000000\nThe number of steps is 124\n\ntesting the number 100000000000\nThe number of steps is 347\n\ntesting the number 1000000000000\nThe number of steps is 146</pre> <p>Even n = 9**100 finishes in fewer than 1000 steps, as shown below.</p> <pre class="svelte-901fe7">testing the number 2.6561398887587478e+95\nd is [ 1.3280699443793739e+95, 1 ]\nd is [ 6.6403497218968695e+94, 2 ]\nd is [ 3.3201748609484348e+94, 3 ]\nd is [ 1.6600874304742174e+94, 4 ]\nd is [ 8.300437152371087e+93, 5 ]\nd is [ 4.1502185761855434e+93, 6 ]\nd is [ 2.0751092880927717e+93, 7 ]\nd is [ 1.0375546440463859e+93, 8 ]\nd is [ 5.1877732202319293e+92, 9 ]\nd is [ 2.5938866101159647e+92, 10 ]\nd is [ 1.2969433050579823e+92, 11 ]\n...\nd is [ 1364, 578 ]\nd is [ 682, 579 ]\nd is [ 341, 580 ]\nd is [ 1024, 581 ]\nd is [ 512, 582 ]\nd is [ 256, 583 ]\nd is [ 128, 584 ]\nd is [ 64, 585 ]\nd is [ 32, 586 ]\nd is [ 16, 587 ]\nd is [ 8, 588 ]\nd is [ 4, 589 ]\nd is [ 2, 590 ]\nd is [ 1, 591 ]\nThe number of steps is 591</pre> <br/><br/><br/> <br/><br/><br/>`}(0,Object.defineProperty)(_page,"name",{value:"_page",configurable:!0});export{_page as default};
//# sourceMappingURL=_page.svelte.js.map
