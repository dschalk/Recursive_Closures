{"version":3,"file":"6.CBrGaWAM.js","sources":["../../../../../../src/routes/async5/+page.svelte"],"sourcesContent":["  \n<script>  \n    import {fade} from \"svelte/transition\"\n    \n    // const worker_OO = new Worker(\"/worker_OO.js\");\n    \n    var dF3x = () => {}; \n    \n    function M (x) {\n      return function go (func){\n        if (func === dF3x) return x;\n        else x = idP(x).then(v => func(v));\n        return go;\n      }\n    };\n\n    const m = M(3);\n\n    async function idP (x) {\n      await wait(5)\n      return x;\n    }\n    \n    function wait(ms) {\n        return new Promise(r => setTimeout(r, ms));\n    }\n    \n        var Mcode = `    var dF3x = () => {}; \n\n    function M (x) {\n        return function go (func){\n            if (func === dF3x) return x;\n            else x = idP(x).then(v => func(v));\n            return go;\n        };\n    };\n    \n    const m = M(3); `;\n    \n    var A;\n\n    async function squareP (x) {\n      await wait(300)\n      return x*x;\n    }\n    \n    let pause = t => async x => {\n      await wait(t)\n      return x;\n    }\n    \n    async function hello (x) {\n      A = \"Hello \"\n      await wait(700)\n      B = \"World\"\n      await wait(700)\n      A = 42\n      await wait(700)\n      B = 42\n      await wait(600);\n      return x;\n    }\n    \n    let divPinverse = a => async b => {\n      await wait (300)\n      return a/b;\n    }\n    \n    let addP =  x => async y => {\n      await wait(500)\n      return parseInt(x,10) + parseInt(y,10);\n    }\n    \n    let doubleP = async y => {\n      await wait(600)\n      return 2 * parseInt(y,10) \n    }\n    \n    let multP = x => async y => {\n      await wait(600)\n      return x * y;\n    }\n    \n    let divP = a => async b => {\n      await wait (300)\n      return b/a;\n    }\n    \n    async function cubeP (x) {\n      await wait(600)\n      return x*x*x;\n    }\n   var functionCode = `    function wait(ms) {\n      return new Promise(r => setTimeout(r, ms));\n    }\n    \n    async function squareP (x) {\n      await wait(300)\n      return x*x;\n    }\n    \n    let pause = t => async x => {\n      await wait(t)\n      return x;\n    }\n    \n    async function hello (x) {\n      await wait(1000)\n      A = \"Hello \"\n      await wait(700)\n      B = \"World\"\n      await wait(700)\n      A = 42\n      await wait(700)\n      B = 42\n      return x;\n    }\n    \n    let divPinverse = a => async b => {\n      await wait (300)\n      return a/b;\n    }\n    \n    let addP =  x => async y => {\n      await wait(300)\n      return parseInt(x,10) + parseInt(y,10);\n    }\n    \n    let doubleP = async y => {\n      await wait(600)\n      return 2 * parseInt(y,10) \n    }\n    \n    let multP = x => async y => {\n      await wait(600)\n      return x * y;\n    }\n    \n    let divP = a => async b => {\n      await wait (300)\n      return b/a;\n    }\n    \n    async function cubeP (x) {\n      await wait(600)\n      return x*x*x;\n    } `;\n    \n    A = \"A\"\n    var B = \"B\"\n    var C = \"C\"\n    var D = \"D\"\n    \n    function restart () {\n      A = \"A\"\n      B = \"B\"\n      C = \"C\"\n      D = \"D\"\n\n    m(() => 4)(addP(3)) (squareP) (v => v-7)(dF3x).then(v => (A = v));\n      \n    m(v => v/42)(v => v + 5)(v=>v*7)(pause(600))(dF3x).then(v => (B = v));\n\n    m(addP(7))(Math.sqrt)(v => v*6)(hello)(dF3x).then(a => (C = a));\n\n    m(divP(14))(v => v * 3)(addP(5))(v=> v * 3)(dF3x).then(v => (D = v)); \n\n    }\n\n    var restartCode = `    function restart () {\n      A = \"A\"\n      B = \"B\"\n      C = \"C\"\n      D = \"D\"\n    m(() => 4)(addP(3)) (squareP) (v => v-7)(dF3x).then(v => (A = v));\n      \n    m(v => v/42)(v => v + 5)(v=>v*7)(pause(600))(dF3x).then(v => (B = v));\n\n    m(addP(7))(Math.sqrt)(v => v*6)(hello)(dF3x).then(a => (C = a));\n\n    m(divP(14))(v => v * 3)(addP(5))(v=> v * 3)(dF3x).then(v => (D = v)); \n\n    }`\n\n    restart();  \n\n\n// Create a generator function with multiple yields\nvar log = console.log;\n\n\nvar G = '';\n\nfunction* generatorFunction() {\n  yield `m(v=>v**3)`\n  yield `m(dF3x)  // 3`\n  yield `m(v=>v**3)(v=>v*2)(v=>v-12)`\n  yield `m(dF3x)  // 42`\n  yield `m(v=>v+7)(Math.sqrt)(dF3x)  // 7`\n  return ''\n}\n\nvar generator = generatorFunction()\n\nfunction cow () {\n    var z = generator.next().value;\n    console.log(\"z is\", z);\n    if (z != undefined) G = z\n    else G = '';\n}\n\n  function handleEvent(e) {\n    if (e.keyCode === 59) cow();\n  }\ncow();\nconsole.log(\"Fuck you\")\n\n</script>\n\nsvelte:window on:keypress={handleEvent} />\n\n<p> Using the modified version of M below, m can handle mixtures of synchronous and asynchronous arguments. idP(a) has no effect if a is a promise. Otherwise, idP transforms a into a promise. To see this in action, click \"Restart\" (below).</p>\n<pre>{Mcode}</pre>\n\n<p id='yes'> In the demonstration below, \"m\" is given mixtures of simple functions and promises.  </p>\n<button on:click = {restart} data.sveltekit.reload>Restart</button>\n<br><br>\n<span style=\"color: #FAF\">  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m(() => 4)(addP(3)) (squareP) (v => v-7)(dF3x).then(v => (A = v));\n= </span> <span style = \"font-weight: bold; color:red\">{A}</span> &nbsp;&nbsp; <span> // x is changed to 4, then &nbsp;(4+3)**2 - 7 = 42</span>   \n<br><br> \n<span style=\"color:#FAF\">  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;m(v => v/42)(v => v + 5)(v=>v*7)(pause(600))(dF3x).then(v => (B = v));\n= <span style = \"font-weight: bold; color:red\">{B}</span> </span> <span> &nbsp; &nbsp; // &nbsp;(42/42)*6*7 = 42</span>\n<br><br>\n<span style=\"color:#FAF\">  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;m(addP(7))(Math.sqrt)(v => v*6)(hello)(dF3x).then(a => (C = a));\n= <span style = \"font-weight: bold; color:red\">{C}</span> </span> <span> &nbsp; &nbsp; // &nbsp;Math.sqrt(42 + 7) * 6 = 42</span>\n<br><br>\n<span style=\"color:#FAF\">  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; m(divP(14))(v => v * 3)(addP(5))(v=> v * 3)(dF3x).then(v => (D = v)) = <span style = \"font-weight: bold; color:red\">{D}</span> </span> <span> &nbsp; &nbsp; // &nbsp;((42 / 14) * 3 + 5) * 3 = 42</span>\n\n<p> The asynchronous functions used above are in this list:</p>\n<pre>{functionCode}</pre>\n\n<p> Here's the restart code: </p>\n<pre>{restartCode}</pre>\n\n\n<br><br><br>\n<br><br><br>\n\n\n\n\n"],"names":["dF3x","__name","M","x","go","func","idP","then","v","m","wait","ms","Promise","r","setTimeout","A","$.mutable_source","squareP","pause","t","async","hello","$.set","B","addP","y","parseInt","divP","a","b","C","D","restart","Math","sqrt","generatorFunction","generator","cow","z","next","value","console","log","handleEvent","e","keyCode"],"mappings":"+9DAMQA,EAAaC,QAAA,QAAT,iBAECC,EAAGC,2BACMC,GAAIC,GACd,OAAAA,IAASL,EAAaG,GACrBA,EAAIG,IAAIH,GAAGI,MAAKC,GAAKH,EAAKG,KACxBJ,GACT,SALOH,OAAAC,EAAA,KAQH,MAAAO,EAAIP,EAAE,kBAEGI,IAAKH,GAEX,aADDO,KAAK,GACJP,CACT,UAESO,KAAKC,GACC,OAAA,IAAAC,SAAQC,GAAKC,WAAWD,EAAGF,IAC1C,CAPeV,OAAAK,IAAA,OAKNL,OAAAS,KAAA,YAgBLK,EAACC,mBAEUC,QAASd,GAEf,aADDO,KAAK,KACJP,EAAEA,CACX,CAHeF,OAAAgB,QAAA,WAKX,IAAAC,EAAQjB,QAAAkB,GAAWC,MAAAjB,UACfO,KAAKS,GACJhB,IAFG,wBAKGkB,MAAOlB,GASb,OARPmB,EAAAP,EAAI,gBACEL,KAAK,KACXY,EAAAC,EAAI,eACEb,KAAK,KACXY,EAAAP,EAAI,UACEL,KAAK,KACXY,EAAAC,EAAI,UACEb,KAAK,KACJP,CACT,CAVeF,OAAAoB,MAAA,SAiBX,IAAAG,EAAQvB,QAAAE,GAAWiB,MAAAK,UACff,KAAK,KACJgB,SAASvB,EAAE,IAAMuB,SAASD,EAAE,MAFzB,QAeRE,EAAO1B,QAAA2B,GAAWR,MAAAS,UACdnB,KAAM,KACLmB,EAAED,IAFA,QAiEXN,EAAAP,EAAI,KACA,IAAAQ,IAAI,KACJO,IAAI,KACJC,IAAI,KAEC,SAAAC,UACPV,EAAAP,EAAI,KACJO,EAAAC,EAAI,KACJD,EAAAQ,EAAI,KACJR,EAAAS,EAAI,KAELtB,GAAA,IAAO,GAAPA,CAAUe,EAAK,GAAff,CAAoBQ,QAApBR,EAA8BD,GAAKA,EAAE,GAArCC,CAAwCT,GAAMO,MAAKC,GAACc,EAAKP,EAAIP,KAE5DC,GAAAD,GAAKA,EAAE,IAAPC,EAAWD,GAAKA,EAAI,GAApBC,EAAuBD,GAAK,EAAFA,GAA1BC,CAA+BS,EAAM,KAArCT,CAA2CT,GAAMO,MAAKC,GAAMc,EAAAC,EAAIf,KAEhEC,EAAAe,EAAK,GAALf,CAASwB,KAAKC,KAAdzB,EAAoBD,GAAO,EAAFA,GAAzBC,CAA8BY,MAA9BZ,CAAqCT,GAAMO,MAAKqB,GAACN,EAAKQ,EAAIF,KAE1DnB,EAAAkB,EAAK,IAALlB,EAAUD,GAAS,EAAJA,GAAfC,CAAsBe,EAAK,GAA3Bf,EAA+BD,GAAQ,EAAJA,GAAnCC,CAA0CT,GAAMO,MAAKC,GAAMc,EAAAS,EAAIvB,IAEjE,CA0BM,SAAA2B,oBAMD,+IAAA,EACT,CA/CalC,OAAA+B,QAAA,WA+BFA,UASD/B,OAAAkC,kBAAA,qBASN,IAAAC,EAAYD,oBAEP,SAAAE,MACD,IAAAC,EAAIF,EAAUG,OAAOC,MACjBC,QAAAC,IAAI,OAAQJ,EAGxB,UAEWK,YAAYC,GACD,KAAdA,EAAEC,SAAmBR,KAC3B,CATOpC,OAAAoC,IAAA,OAOEpC,OAAA0C,YAAA,eAGRN,MACHI,QAAQC,IAAI,8EAIeC,g9DAS6B5B,UAGRQ,UAGAO,UAEmIC,mBAX/JC"}